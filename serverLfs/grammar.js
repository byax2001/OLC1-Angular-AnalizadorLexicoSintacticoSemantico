/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,11],$V2=[1,12],$V3=[1,18],$V4=[1,20],$V5=[1,29],$V6=[1,30],$V7=[1,31],$V8=[1,32],$V9=[1,33],$Va=[1,21],$Vb=[1,28],$Vc=[1,22],$Vd=[1,23],$Ve=[1,24],$Vf=[1,25],$Vg=[1,26],$Vh=[1,27],$Vi=[2,5,14,15,22,25,26,27,28,29,30,38,41,42,46,51,53,54,55,57,58,60,61,64,67],$Vj=[1,37],$Vk=[1,52],$Vl=[1,58],$Vm=[1,59],$Vn=[1,60],$Vo=[1,61],$Vp=[1,62],$Vq=[1,63],$Vr=[1,55],$Vs=[1,64],$Vt=[1,50],$Vu=[1,51],$Vv=[1,53],$Vw=[1,54],$Vx=[1,68],$Vy=[1,80],$Vz=[1,85],$VA=[1,86],$VB=[1,87],$VC=[1,88],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,96],$VL=[1,97],$VM=[1,98],$VN=[1,99],$VO=[19,40,42,52,66,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],$VP=[2,29],$VQ=[1,109],$VR=[40,66],$VS=[2,5,14,15,22,25,26,27,28,29,30,32,33,34,35,36,37,38,39,41,42,46,51,53,54,55,57,58,60,61,64,67,75,77,91,92,93],$VT=[1,149],$VU=[19,40,42,52,66,76,77,82,83,84,85,86,87,88,89,90],$VV=[19,40,42,52,66,76,77,78,79,80,82,83,84,85,86,87,88,89,90],$VW=[19,40,42,52,66,82,83,84,85,86,87,88,89,90],$VX=[19,40,42,52,66,88,89],$VY=[1,176],$VZ=[1,175],$V_=[42,51,54],$V$=[2,5,14,15,22,25,26,27,28,29,30,38,41,42,44,46,51,53,54,55,57,58,60,61,64,67],$V01=[1,217],$V11=[42,51],$V21=[1,222];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"ASIGNACION":7,"DECLARACION":8,"IF":9,"SWITCH":10,"FOR":11,"WHILE":12,"DO_WHILE":13,"PRINT":14,"PRINTLN":15,"FUNCIONES":16,"METODOS":17,"LLAMADA":18,"puntoycoma":19,"BLOQUE_INST":20,"TIPOVAR":21,"id":22,"igual":23,"EXPRESION":24,"const":25,"int":26,"double":27,"boolean":28,"char":29,"string":30,"TIPODATO":31,"cadena":32,"caracter":33,"decimal":34,"entero":35,"true":36,"false":37,"if":38,"parentesisa":39,"parentesisc":40,"llavea":41,"llavec":42,"CELSEIF":43,"else":44,"ELSEIF":45,"switch":46,"INST_SWITCH":47,"CASES_LIST":48,"DEFAULT":49,"CASE":50,"case":51,"dospuntos":52,"break":53,"default":54,"for":55,"INST_FOR":56,"continue":57,"while":58,"INST_WHILE":59,"do":60,"void":61,"PARAMETROS":62,"INST_METODOS":63,"return":64,"INST_FUNCIONES":65,"coma":66,"call":67,"PARAMETROSLLAMADA":68,"N_PRINTLN":69,"println":70,"N_PRINT":71,"print":72,"arentesisc":73,"N_TYPEOF":74,"typeof":75,"mas":76,"menos":77,"div":78,"multi":79,"mod":80,"pow":81,"igualigual":82,"diferente":83,"menorque":84,"menorigual":85,"mayorque":86,"mayorigual":87,"or":88,"and":89,"xor":90,"not":91,"inc":92,"dec":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"PRINT",15:"PRINTLN",19:"puntoycoma",22:"id",23:"igual",25:"const",26:"int",27:"double",28:"boolean",29:"char",30:"string",32:"cadena",33:"caracter",34:"decimal",35:"entero",36:"true",37:"false",38:"if",39:"parentesisa",40:"parentesisc",41:"llavea",42:"llavec",44:"else",46:"switch",51:"case",52:"dospuntos",53:"break",54:"default",55:"for",57:"continue",58:"while",60:"do",61:"void",64:"return",66:"coma",67:"call",70:"println",72:"print",73:"arentesisc",75:"typeof",76:"mas",77:"menos",78:"div",79:"multi",80:"mod",81:"pow",82:"igualigual",83:"diferente",84:"menorque",85:"menorigual",86:"mayorque",87:"mayorigual",88:"or",89:"and",90:"xor",91:"not",92:"inc",93:"dec"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[8,5],[8,6],[7,4],[21,1],[21,1],[21,1],[21,1],[21,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[9,7],[9,8],[9,12],[43,2],[43,1],[45,8],[10,7],[47,1],[47,2],[47,3],[47,2],[47,1],[48,2],[48,1],[50,4],[50,6],[49,3],[49,5],[11,10],[11,10],[56,1],[56,3],[56,4],[56,3],[12,7],[13,9],[59,1],[59,3],[59,4],[59,3],[17,8],[17,7],[63,1],[63,2],[16,8],[16,7],[65,1],[65,3],[62,4],[62,2],[18,5],[18,4],[18,4],[18,3],[68,3],[68,1],[69,5],[69,5],[69,4],[71,5],[71,5],[71,4],[74,4],[20,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,2],[24,2],[24,2],[24,2],[24,3],[24,1],[24,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("termine de analizar" ); return this.$; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];   
break;
case 3:
this.$= [$$[$0]];
break;
case 17:
console.log("Error Sintactico, simbolo no esperado:"  + yytext 
                           + " linea: " + this._$.first_line
                           +" columna: "+ this._$.first_column);
                           
break;
case 21: case 22: case 23: case 24: case 25:
this.$=$$[$0];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},{1:[3]},{2:$V0,5:[1,34],6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),{19:[1,36]},o($Vi,[2,16]),o($Vi,[2,17]),{23:$Vj,39:[1,38]},{22:[1,39]},{21:40,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9},{39:[1,41]},{39:[1,42]},{39:[1,43]},{39:[1,44]},{41:[1,45]},{22:[1,46]},{22:[1,47]},{2:$V0,4:48,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},{22:[2,21]},{22:[2,22]},{22:[2,23]},{22:[2,24]},{22:[2,25]},{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,15]),{22:$Vk,24:49,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:$Vk,24:67,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,40:[1,66],68:65,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{23:$Vx,39:[1,69]},{22:[1,70]},{22:$Vk,24:71,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:$Vk,24:72,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{7:74,8:73,21:75,22:[1,76],25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9},{22:$Vk,24:77,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{2:$V0,4:79,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,53:$Vy,55:$Vd,58:$Ve,59:78,60:$Vf,61:$Vg,67:$Vh},{39:[1,81]},{39:[1,82]},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,42:[1,83],46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},{19:[1,84],76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN},{22:$Vk,24:100,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:$Vk,24:101,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},o($VO,$VP,{92:[1,102],93:[1,103]}),{22:[1,104]},{22:[1,105]},{22:$Vk,24:106,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},o($VO,[2,109]),o($VO,[2,110]),o($VO,[2,26]),o($VO,[2,27]),o($VO,[2,28]),o($VO,[2,30]),o($VO,[2,31]),o($VO,[2,32]),{39:[1,107]},{40:[1,108],66:$VQ},{19:[2,76]},o($VR,[2,78],{76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN}),{22:$Vk,24:110,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{21:113,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,40:[1,112],62:111},{23:[1,114]},{40:[1,115],76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN},{40:[1,116],76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN},{22:$Vk,24:117,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:$Vk,24:118,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:[1,119]},{23:$Vj},{40:[1,120],76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN},{42:[1,121]},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,42:[2,59],46:$Vc,53:[1,122],55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},{19:[1,123]},{21:113,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,40:[1,125],62:124},{22:$Vk,24:67,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,40:[1,127],68:126,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},o($Vi,[2,86]),o($VS,[2,20]),{22:$Vk,24:128,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:$Vk,24:129,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:$Vk,24:130,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:$Vk,24:131,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:$Vk,24:132,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:$Vk,24:133,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:$Vk,24:134,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:$Vk,24:135,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:$Vk,24:136,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:$Vk,24:137,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:$Vk,24:138,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:$Vk,24:139,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:$Vk,24:140,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:$Vk,24:141,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:$Vk,24:142,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},o($VO,[2,93]),o($VO,[2,103]),o($VO,[2,104]),o($VO,[2,105]),o($VO,[2,106]),o($VO,[2,107]),{40:[1,143],76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN},{22:[1,145],31:144,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq},{19:[2,75]},{22:$Vk,24:146,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{19:[1,147],76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN},{40:[1,148],66:$VT},{41:[1,150]},{22:[1,151]},{22:$Vk,24:152,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{41:[1,153]},{41:[1,154]},{19:[1,155],76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN},{19:[1,156],76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN},{23:$Vx},{41:[1,157]},{58:[1,158]},{19:[1,159]},{2:$V0,4:160,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},{40:[1,161],66:$VT},{41:[1,162]},{40:[1,163],66:$VQ},{19:[2,74]},o($VU,[2,87],{78:$VB,79:$VC,80:$VD,81:$VE}),o($VU,[2,88],{78:$VB,79:$VC,80:$VD,81:$VE}),o($VV,[2,89],{81:$VE}),o($VV,[2,90],{81:$VE}),o($VV,[2,91],{81:$VE}),o($VV,[2,92],{81:$VE}),o($VW,[2,94],{76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE}),o($VW,[2,95],{76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE}),o($VW,[2,96],{76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE}),o($VW,[2,97],{76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE}),o($VW,[2,98],{76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE}),o($VW,[2,99],{76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE}),o([19,40,42,52,66,88],[2,100],{76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VM,90:$VN}),o($VX,[2,101],{76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,90:$VN}),o($VX,[2,102],{76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,90:$VN}),o($VO,[2,108]),{40:[1,164]},{40:$VP},o($VR,[2,77],{76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN}),o($VS,[2,18]),{41:[1,165]},{21:166,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9},{2:$V0,4:168,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,65:167,67:$Vh},o($VR,[2,72]),{19:[1,169],76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN},{2:$V0,4:170,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},{47:171,48:172,49:173,50:174,51:$VY,54:$VZ},{22:$Vk,24:177,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{22:$Vk,24:178,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{2:$V0,4:79,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,53:$Vy,55:$Vd,58:$Ve,59:179,60:$Vf,61:$Vg,67:$Vh},{39:[1,180]},{2:$V0,4:181,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,42:[2,60],46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,42:[2,62],46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},{41:[1,182]},{2:$V0,4:184,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,63:183,67:$Vh},{19:[2,73]},o($VO,[2,85]),{2:$V0,4:168,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,65:185,67:$Vh},{22:[1,186]},{42:[1,187]},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,42:[2,69],46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,64:[1,188],67:$Vh},o($VS,[2,19]),{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,42:[1,189],46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},{42:[1,190]},{42:[2,40],49:191,50:192,51:$VY,54:$VZ},{42:[2,44],48:193,50:174,51:$VY},o($V_,[2,46]),{52:[1,194]},{22:$Vk,24:195,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{40:[1,196],76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN},{40:[1,197],76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN},{42:[1,198]},{22:$Vk,24:199,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,42:[2,61],46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},{2:$V0,4:184,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,63:200,67:$Vh},{42:[1,201]},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,42:[2,65],46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,64:[1,202],67:$Vh},{42:[1,203]},o($VR,[2,71]),o($Vi,[2,68]),{22:$Vk,24:204,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},o($Vi,[2,33],{43:205,45:206,44:[1,207]}),o($Vi,[2,39]),{42:[2,41],48:208,50:174,51:$VY},o($V_,[2,45]),{42:[2,43],50:192,51:$VY},{2:$V0,4:209,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},{52:[1,210],76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN},{41:[1,211]},{41:[1,212]},o($Vi,[2,57]),{40:[1,213],76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN},{42:[1,214]},o($Vi,[2,64]),{42:[2,66]},o($Vi,[2,67]),{42:[2,70],76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN},o($Vi,[2,34],{45:216,44:[1,215]}),o($V$,[2,37]),{38:$V01},{42:[2,42],50:192,51:$VY},o($V11,[2,49],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,16:13,17:14,18:15,20:16,21:19,6:35,2:$V0,14:$V1,15:$V2,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,53:[1,218],55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh}),{2:$V0,4:219,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},{2:$V0,4:221,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,55:$Vd,56:220,57:$V21,58:$Ve,60:$Vf,61:$Vg,67:$Vh},{2:$V0,4:221,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,55:$Vd,56:223,57:$V21,58:$Ve,60:$Vf,61:$Vg,67:$Vh},{19:[1,224]},o($Vi,[2,63]),{38:$V01,41:[1,225]},o($V$,[2,36]),{39:[1,226]},{19:[1,227]},o($V_,[2,47],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,16:13,17:14,18:15,20:16,21:19,6:35,2:$V0,14:$V1,15:$V2,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,53:[1,228],55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh}),{42:[1,229]},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,42:[2,53],46:$Vc,55:$Vd,57:[1,230],58:$Ve,60:$Vf,61:$Vg,67:$Vh},{19:[1,231]},{42:[1,232]},o($Vi,[2,58]),{2:$V0,4:233,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},{22:$Vk,24:234,31:56,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,39:$Vr,74:57,75:$Vs,77:$Vt,91:$Vu,92:$Vv,93:$Vw},o($V11,[2,50]),{19:[1,235]},o($Vi,[2,51]),{19:[1,236]},{2:$V0,4:237,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},o($Vi,[2,52]),{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,42:[1,238],46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},{40:[1,239],76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN},o($V_,[2,48]),{2:$V0,4:240,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,42:[2,54],46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,42:[2,56],46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},o($Vi,[2,35]),{41:[1,241]},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,42:[2,55],46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},{2:$V0,4:242,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:16,21:19,22:$V3,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,38:$Va,41:$Vb,42:[1,243],46:$Vc,55:$Vd,58:$Ve,60:$Vf,61:$Vg,67:$Vh},o($V$,[2,38])],
defaultActions: {29:[2,21],30:[2,22],31:[2,23],32:[2,24],33:[2,25],34:[2,1],66:[2,76],108:[2,75],127:[2,74],145:[2,29],163:[2,73],202:[2,66]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3: console.log("Reconocio : " + yy_.yytext);  return 92 
break;
case 4: console.log("Reconocio : " + yy_.yytext);  return 93 
break;
case 5: console.log("Reconocio : " + yy_.yytext);  return 82 
break;
case 6: console.log("Reconocio : " + yy_.yytext);  return 83 
break;
case 7: console.log("Reconocio : " + yy_.yytext);  return 39 
break;
case 8: console.log("Reconocio : " + yy_.yytext);  return 40 
break;
case 9: console.log("Reconocio : " + yy_.yytext);  return 'corchetea' 
break;
case 10: console.log("Reconocio : " + yy_.yytext);  return 'corchetec' 
break;
case 11: console.log("Reconocio : " + yy_.yytext);  return 41 
break;
case 12: console.log("Reconocio : " + yy_.yytext);  return 42 
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 66 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 19 
break;
case 15: console.log("Reconocio : " + yy_.yytext);  return 23 
break;
case 16: console.log("Reconocio : " + yy_.yytext);  return 'interrogacion' 
break;
case 17: console.log("Reconocio : " + yy_.yytext);  return 52 
break;
case 18: console.log("Reconocio : " + yy_.yytext);  return 76 
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 77 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 81 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 79 
break;
case 22: console.log("Reconocio : " + yy_.yytext);  return 78 
break;
case 23: console.log("Reconocio : " + yy_.yytext);  return 80 
break;
case 24: console.log("Reconocio : " + yy_.yytext);  return 85 
break;
case 25: console.log("Reconocio : " + yy_.yytext);  return 84 
break;
case 26: console.log("Reconocio : " + yy_.yytext);  return 87 
break;
case 27: console.log("Reconocio : " + yy_.yytext);  return 86 
break;
case 28: console.log("Reconocio : " + yy_.yytext);  return 88 
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 89 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 91 
break;
case 31: console.log("Reconocio : " + yy_.yytext);  return 90 
break;
case 32:console.log("Reconocio: "+yy_.yytext); return 26
break;
case 33:console.log("Reconocio: "+yy_.yytext); return 27
break;
case 34:console.log("Reconocio: "+yy_.yytext); return 28
break;
case 35:console.log("Reconocio: "+yy_.yytext); return 29
break;
case 36:console.log("Reconocio: "+yy_.yytext); return 30
break;
case 37:console.log("Reconocio: "+yy_.yytext); return 25
break;
case 38:console.log("Reconocio: "+yy_.yytext); return 36
break;
case 39:console.log("Reconocio: "+yy_.yytext); return 37
break;
case 40:console.log("Reconocio: "+yy_.yytext); return 38
break;
case 41:console.log("Reconocio: "+yy_.yytext); return 44
break;
case 42:console.log("Reconocio: "+yy_.yytext); return 46
break;
case 43:console.log("Reconocio: "+yy_.yytext); return 51
break;
case 44:console.log("Reconocio: "+yy_.yytext); return 54
break;
case 45:console.log("Reconocio: "+yy_.yytext); return 58
break;
case 46:console.log("Reconocio: "+yy_.yytext); return 60
break;
case 47:console.log("Reconocio: "+yy_.yytext); return 55
break;
case 48:console.log("Reconocio: "+yy_.yytext); return 53
break;
case 49:console.log("Reconocio: "+yy_.yytext); return 57
break;
case 50:console.log("Reconocio: "+yy_.yytext); return 64
break;
case 51:console.log("Reconocio: "+yy_.yytext); return 72
break;
case 52:console.log("Reconocio: "+yy_.yytext); return 70
break;
case 53:console.log("Reconocio: "+yy_.yytext); return 75
break;
case 54:console.log("Reconocio: "+yy_.yytext); return 61
break;
case 55:console.log("Reconocio: "+yy_.yytext); return 'length'
break;
case 56:console.log("Reconocio: "+yy_.yytext); return 67
break;
case 57:console.log("Reconocio: "+yy_.yytext); return 22
break;
case 58:console.log("Reconocio: "+yy_.yytext); return 32
break;
case 59:console.log("Reconocio: "+yy_.yytext); return 34
break;
case 60:console.log("Reconocio: "+yy_.yytext); return 35
break;
case 61:console.log("Reconocio: "+yy_.yytext); return 33
break;
case 62:return 5;
break;
case 63:
            console.log('Este error es un error lexico: '+yy_.yytext+' en al linea '+yy_.yylloc.first_line+' en la columna '+yy_.yylloc.first_column);
        
break;
}
},
rules: [/^(?:[ \r\t\n\s]+)/i,/^(?:\/\/.*)/i,/^(?:\/\*([\n]|[^"*/"])*\*\/)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:;)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:const\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:typeof\b)/i,/^(?:void\b)/i,/^(?:length\b)/i,/^(?:call\b)/i,/^(?:(([a-zA-ZñÑ]+)(([a-zA-ZñÑ]+)|([0-9]+)|_)*))/i,/^(?:("(([^\"\n])|(\\[\'\"\\nrt]))*"))/i,/^(?:(([0-9]+)(\.([0-9]+))?))/i,/^(?:{ENTERO})/i,/^(?:('(([^\'\n])|(\\[\'\"\\nrt]))'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}