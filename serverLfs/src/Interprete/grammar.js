/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,20],$V2=[1,30],$V3=[1,32],$V4=[1,33],$V5=[1,34],$V6=[1,35],$V7=[1,36],$V8=[1,21],$V9=[1,31],$Va=[1,22],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[1,28],$Vf=[1,29],$Vg=[1,27],$Vh=[1,26],$Vi=[2,5,25,27,28,29,30,31,32,40,43,44,48,53,55,56,57,59,60,62,63,66,68,70,71],$Vj=[1,41],$Vk=[23,26],$Vl=[2,22],$Vm=[1,54],$Vn=[1,59],$Vo=[1,65],$Vp=[1,66],$Vq=[1,67],$Vr=[1,68],$Vs=[1,69],$Vt=[1,70],$Vu=[1,62],$Vv=[1,71],$Vw=[1,57],$Vx=[1,58],$Vy=[1,60],$Vz=[1,61],$VA=[1,76],$VB=[1,85],$VC=[1,89],$VD=[1,100],$VE=[1,101],$VF=[1,102],$VG=[1,103],$VH=[1,104],$VI=[1,105],$VJ=[1,106],$VK=[1,107],$VL=[1,108],$VM=[1,109],$VN=[1,110],$VO=[1,111],$VP=[1,112],$VQ=[1,113],$VR=[1,114],$VS=[19,26,42,44,54,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],$VT=[2,31],$VU=[1,117],$VV=[1,118],$VW=[1,147],$VX=[19,42,72],$VY=[26,42],$VZ=[2,5,25,27,28,29,30,31,32,34,35,36,37,38,39,40,41,43,44,48,53,55,56,57,59,60,62,63,66,68,70,71,74,76,90,91,92],$V_=[1,167],$V$=[19,26,42,44,54,75,76,81,82,83,84,85,86,87,88,89],$V01=[19,26,42,44,54,75,76,77,78,79,81,82,83,84,85,86,87,88,89],$V11=[19,26,42,44,54,81,82,83,84,85,86,87,88,89],$V21=[19,26,42,44,54,87,88],$V31=[1,199],$V41=[1,198],$V51=[44,53,56],$V61=[2,5,25,27,28,29,30,31,32,40,43,44,46,48,53,55,56,57,59,60,62,63,66,68,70,71],$V71=[1,240],$V81=[44,53],$V91=[1,245];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"ASIGNACION":7,"DECLARACION":8,"IF":9,"SWITCH":10,"FOR":11,"WHILE":12,"DO_WHILE":13,"N_PRINT":14,"N_PRINTLN":15,"FUNCIONES":16,"METODOS":17,"LLAMADA":18,"puntoycoma":19,"BLOQUE_INST":20,"TIPOVAR":21,"CONJID":22,"igual":23,"EXPRESION":24,"const":25,"coma":26,"id":27,"int":28,"double":29,"boolean":30,"char":31,"string":32,"TIPODATO":33,"cadena":34,"caracter":35,"decimal":36,"entero":37,"true":38,"false":39,"if":40,"parentesisa":41,"parentesisc":42,"llavea":43,"llavec":44,"CELSEIF":45,"else":46,"ELSEIF":47,"switch":48,"INST_SWITCH":49,"CASES_LIST":50,"DEFAULT":51,"CASE":52,"case":53,"dospuntos":54,"break":55,"default":56,"for":57,"INST_FOR":58,"continue":59,"while":60,"INST_WHILE":61,"do":62,"void":63,"PARAMETROS":64,"INST_METODOS":65,"return":66,"INST_FUNCIONES":67,"call":68,"PARAMETROSLLAMADA":69,"println":70,"print":71,"arentesisc":72,"N_TYPEOF":73,"typeof":74,"mas":75,"menos":76,"div":77,"multi":78,"mod":79,"pow":80,"igualigual":81,"diferente":82,"menorque":83,"menorigual":84,"mayorque":85,"mayorigual":86,"or":87,"and":88,"xor":89,"not":90,"inc":91,"dec":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:"puntoycoma",23:"igual",25:"const",26:"coma",27:"id",28:"int",29:"double",30:"boolean",31:"char",32:"string",34:"cadena",35:"caracter",36:"decimal",37:"entero",38:"true",39:"false",40:"if",41:"parentesisa",42:"parentesisc",43:"llavea",44:"llavec",46:"else",48:"switch",53:"case",54:"dospuntos",55:"break",56:"default",57:"for",59:"continue",60:"while",62:"do",63:"void",66:"return",68:"call",70:"println",71:"print",72:"arentesisc",74:"typeof",75:"mas",76:"menos",77:"div",78:"multi",79:"mod",80:"pow",81:"igualigual",82:"diferente",83:"menorque",84:"menorigual",85:"mayorque",86:"mayorigual",87:"or",88:"and",89:"xor",90:"not",91:"inc",92:"dec"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[8,5],[8,6],[7,4],[22,3],[22,1],[21,1],[21,1],[21,1],[21,1],[21,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[9,7],[9,8],[9,12],[45,2],[45,1],[47,8],[10,7],[49,1],[49,2],[49,3],[49,2],[49,1],[50,2],[50,1],[52,4],[52,6],[51,3],[51,5],[11,10],[11,10],[58,1],[58,3],[58,4],[58,3],[12,7],[13,9],[61,1],[61,3],[61,4],[61,3],[17,8],[17,7],[65,1],[65,2],[16,8],[16,7],[67,1],[67,3],[64,4],[64,2],[18,5],[18,4],[18,4],[18,3],[69,3],[69,1],[15,5],[15,5],[15,4],[14,5],[14,5],[14,4],[73,4],[20,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,2],[24,2],[24,2],[24,2],[24,3],[24,1],[24,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("termine de analizar" ); return this.$; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];   
break;
case 3:
this.$= [$$[$0]];
break;
case 4: case 5: case 11: case 12: case 16:
this.$= $$[$0];
break;
case 17:
console.log("Error Sintactico, simbolo no esperado:"  + yytext 
                           + " linea: " + this._$.first_line
                           +" columna: "+ this._$.first_column);
                    bDatos.addError("Sintactico","No se esperaba este caracter",_$[$0].first_line,yylloc._$[$0].last_column);       
                    
break;
case 18:
this.$= new Declaracion(false,$$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 19:
this.$= new Declaracion(true,$$[$0-4],$$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].last_column);
break;
case 20:
this.$=new Asignacion($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column)
break;
case 21:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 22:
  this.$=[$$[$0]];   
break;
case 23:
this.$=Type.INT;
break;
case 24:
this.$=Type.DOUBLE;
break;
case 25:
this.$=Type.BOOLEAN;
break;
case 26:
this.$=Type.CHAR;
break;
case 27:
this.$=Type.STRING;
break;
case 28:
this.$= new Literal($$[$0],Type.STRING,_$[$0].first_line,_$[$0].last_column);
break;
case 29:
this.$= new Literal($$[$0],Type.CHAR,_$[$0].first_line,_$[$0].last_column);
break;
case 30:
this.$= new Literal($$[$0],Type.DOUBLE,_$[$0].first_line,_$[$0].last_column);
break;
case 31:
this.$= new Literal($$[$0],Type.ID,_$[$0].first_line,_$[$0].last_column);
break;
case 32:
this.$= new Literal($$[$0],Type.INT,_$[$0].first_line,_$[$0].last_column);
break;
case 33: case 34:
this.$= new Literal($$[$0],Type.BOOLEAN,_$[$0].first_line,_$[$0].last_column);
break;
case 81:
this.$=new Println($$[$0-2],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 83:
this.$=new Println(null,_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 84:
this.$=new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 86:
this.$=new Print(null,_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 87:
this.$=new Typeof($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 89:
this.$=new OAritmeticas($$[$0-2],$$[$0],TypeAritmeticas.SUMA,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 90:
this.$=new OAritmeticas($$[$0-2],$$[$0],TypeAritmeticas.RESTA,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 91:
this.$=new OAritmeticas($$[$0-2],$$[$0],TypeAritmeticas.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 92:
this.$=new OAritmeticas($$[$0-2],$$[$0],TypeAritmeticas.DIVISION,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 93:
this.$=new OAritmeticas($$[$0-2],$$[$0],TypeAritmeticas.MOD,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 94:
this.$=new OAritmeticas($$[$0-2],$$[$0],TypeAritmeticas.POW,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 95:
this.$=new OAritmeticas($$[$0],null,TypeAritmeticas.NEGACION,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 96:
this.$=new ORelacionales($$[$0-2],$$[$0],TypeRelacionales.IGUALQUE,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 97:
this.$=new ORelacionales($$[$0-2],$$[$0],TypeRelacionales.DIFERENTEQUE,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 98:
this.$=new ORelacionales($$[$0-2],$$[$0],TypeRelacionales.MENORQUE,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 99:
this.$=new ORelacionales($$[$0-2],$$[$0],TypeRelacionales.MENORIGUALQUE,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 100:
this.$=new ORelacionales($$[$0-2],$$[$0],TypeRelacionales.MAYORQUE,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 101:
this.$=new ORelacionales($$[$0-2],$$[$0],TypeRelacionales.MAYORIGUALQUE,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 102:
this.$=new OLogicas($$[$0-2],$$[$0],TypeLogic.OR,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 103:
this.$=new OLogicas($$[$0-2],$$[$0],TypeLogic.AND,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 104:
this.$=new OLogicas($$[$0-2],$$[$0],TypeLogic.XOR,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 105:
this.$=new  OLogicas($$[$0],null,TypeLogic.NOT,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 106:
this.$=new IncDecremento ($$[$0-1],TypeAritmeticas.INCDER,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 107:
this.$=new IncDecremento ($$[$0],TypeAritmeticas.INCIZQ,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 108:
this.$=new IncDecremento ($$[$0-1],TypeAritmeticas.DECDER,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 109:
this.$=new IncDecremento ($$[$0],TypeAritmeticas.DECIZQ,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 110:
this.$=$$[$0-1];
break;
case 111: case 112:
this.$=$$[$0];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{1:[3]},{2:$V0,5:[1,37],6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),{19:[1,39]},o($Vi,[2,16]),o($Vi,[2,17]),{23:[1,40],26:$Vj},{22:42,27:[1,43]},{21:44,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},{41:[1,45]},{41:[1,46]},{41:[1,47]},{41:[1,48]},{43:[1,49]},{41:[1,50]},{41:[1,51]},{27:[1,52]},{27:[1,53]},o($Vk,$Vl,{41:$Vm}),{2:$V0,4:55,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{27:[2,23]},{27:[2,24]},{27:[2,25]},{27:[2,26]},{27:[2,27]},{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,15]),{24:56,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{27:[1,72]},{23:[1,73],26:$Vj},o($Vk,$Vl,{41:[1,74]}),{22:75,27:$VA},{24:77,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{24:78,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{7:80,8:79,21:81,22:18,25:$V1,27:$VA,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},{24:82,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{2:$V0,4:84,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,55:$VB,57:$Vb,60:$Vc,61:83,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{18:87,24:86,27:$VC,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,42:[1,88],68:$Vf,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{18:91,24:90,27:$VC,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,42:[1,92],68:$Vf,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{41:[1,93]},{41:[1,94]},{24:97,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,42:[1,96],69:95,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,44:[1,98],48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{19:[1,99],75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{24:115,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{24:116,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},o($VS,$VT,{91:$VU,92:$VV}),{27:[1,119]},{27:[1,120]},{24:121,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},o($VS,[2,111]),o($VS,[2,112]),o($VS,[2,28]),o($VS,[2,29]),o($VS,[2,30]),o($VS,[2,32]),o($VS,[2,33]),o($VS,[2,34]),{41:[1,122]},o($Vk,[2,21]),{24:123,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{21:126,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,42:[1,125],64:124},{23:[1,127],26:$Vj},o($Vk,$Vl),{42:[1,128],75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{42:[1,129],75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{24:130,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{24:131,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{22:42,27:$VA},{42:[1,132],75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{44:[1,133]},{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,44:[2,61],48:$Va,55:[1,134],57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{19:[1,135]},{42:[1,136],75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{72:[1,137]},{19:[1,138]},o([42,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],$VT,{41:$Vm,91:$VU,92:$VV}),{42:[1,139],75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{42:[1,140]},{19:[1,141]},{21:126,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,42:[1,143],64:142},{24:97,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,42:[1,145],69:144,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{26:$VW,42:[1,146]},o($VX,[2,78]),o($VY,[2,80],{75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR}),o($Vi,[2,88]),o($VZ,[2,20]),{24:148,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{24:149,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{24:150,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{24:151,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{24:152,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{24:153,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{24:154,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{24:155,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{24:156,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{24:157,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{24:158,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{24:159,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{24:160,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{24:161,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{24:162,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},o($VS,[2,95]),o($VS,[2,105]),o($VS,[2,106]),o($VS,[2,108]),o($VS,[2,107]),o($VS,[2,109]),{42:[1,163],75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{24:164,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{19:[1,165],75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{26:$V_,42:[1,166]},{43:[1,168]},{27:[1,169]},{24:170,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{43:[1,171]},{43:[1,172]},{19:[1,173],75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{19:[1,174],75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{43:[1,175]},{60:[1,176]},{19:[1,177]},{2:$V0,4:178,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{19:[1,179]},{19:[1,180]},o($Vi,[2,86]),{19:[1,181]},{19:[1,182]},o($Vi,[2,83]),{26:$V_,42:[1,183]},{43:[1,184]},{26:$VW,42:[1,185]},o($VX,[2,76]),o($VX,[2,77]),{24:186,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},o($V$,[2,89],{77:$VF,78:$VG,79:$VH,80:$VI}),o($V$,[2,90],{77:$VF,78:$VG,79:$VH,80:$VI}),o($V01,[2,91],{80:$VI}),o($V01,[2,92],{80:$VI}),o($V01,[2,93],{80:$VI}),o($V01,[2,94],{80:$VI}),o($V11,[2,96],{75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI}),o($V11,[2,97],{75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI}),o($V11,[2,98],{75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI}),o($V11,[2,99],{75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI}),o($V11,[2,100],{75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI}),o($V11,[2,101],{75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI}),o([19,26,42,44,54,87],[2,102],{75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,88:$VQ,89:$VR}),o($V21,[2,103],{75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,89:$VR}),o($V21,[2,104],{75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,89:$VR}),o($VS,[2,110]),{42:[1,187],75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},o($VZ,[2,18]),{43:[1,188]},{21:189,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7},{2:$V0,4:191,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,67:190,68:$Vf,70:$Vg,71:$Vh},o($VY,[2,74]),{19:[1,192],75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{2:$V0,4:193,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{49:194,50:195,51:196,52:197,53:$V31,56:$V41},{24:200,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{24:201,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{2:$V0,4:84,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,55:$VB,57:$Vb,60:$Vc,61:202,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{41:[1,203]},{2:$V0,4:204,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,44:[2,62],48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,44:[2,64],48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},o($Vi,[2,84]),o($Vi,[2,85]),o($Vi,[2,81]),o($Vi,[2,82]),{43:[1,205]},{2:$V0,4:207,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,65:206,68:$Vf,70:$Vg,71:$Vh},o($VX,[2,75]),o($VY,[2,79],{75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR}),o($VS,[2,87]),{2:$V0,4:191,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,67:208,68:$Vf,70:$Vg,71:$Vh},{27:[1,209]},{44:[1,210]},{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,44:[2,71],48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,66:[1,211],68:$Vf,70:$Vg,71:$Vh},o($VZ,[2,19]),{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,44:[1,212],48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{44:[1,213]},{44:[2,42],51:214,52:215,53:$V31,56:$V41},{44:[2,46],50:216,52:197,53:$V31},o($V51,[2,48]),{54:[1,217]},{24:218,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{42:[1,219],75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{42:[1,220],75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{44:[1,221]},{24:222,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,44:[2,63],48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{2:$V0,4:207,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,65:223,68:$Vf,70:$Vg,71:$Vh},{44:[1,224]},{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,44:[2,67],48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,66:[1,225],68:$Vf,70:$Vg,71:$Vh},{44:[1,226]},o($VY,[2,73]),o($Vi,[2,70]),{24:227,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},o($Vi,[2,35],{45:228,47:229,46:[1,230]}),o($Vi,[2,41]),{44:[2,43],50:231,52:197,53:$V31},o($V51,[2,47]),{44:[2,45],52:215,53:$V31},{2:$V0,4:232,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{54:[1,233],75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{43:[1,234]},{43:[1,235]},o($Vi,[2,59]),{42:[1,236],75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},{44:[1,237]},o($Vi,[2,66]),{44:[2,68]},o($Vi,[2,69]),{44:[2,72],75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},o($Vi,[2,36],{47:239,46:[1,238]}),o($V61,[2,39]),{40:$V71},{44:[2,44],52:215,53:$V31},o($V81,[2,51],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,22:18,21:19,6:38,2:$V0,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,55:[1,241],57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh}),{2:$V0,4:242,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{2:$V0,4:244,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,57:$Vb,58:243,59:$V91,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{2:$V0,4:244,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,57:$Vb,58:246,59:$V91,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{19:[1,247]},o($Vi,[2,65]),{40:$V71,43:[1,248]},o($V61,[2,38]),{41:[1,249]},{19:[1,250]},o($V51,[2,49],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,22:18,21:19,6:38,2:$V0,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,55:[1,251],57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh}),{44:[1,252]},{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,44:[2,55],48:$Va,57:$Vb,59:[1,253],60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{19:[1,254]},{44:[1,255]},o($Vi,[2,60]),{2:$V0,4:256,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{24:257,27:$Vn,33:63,34:$Vo,35:$Vp,36:$Vq,37:$Vr,38:$Vs,39:$Vt,41:$Vu,73:64,74:$Vv,76:$Vw,90:$Vx,91:$Vy,92:$Vz},o($V81,[2,52]),{19:[1,258]},o($Vi,[2,53]),{19:[1,259]},{2:$V0,4:260,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},o($Vi,[2,54]),{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,44:[1,261],48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{42:[1,262],75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR},o($V51,[2,50]),{2:$V0,4:263,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,44:[2,56],48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,44:[2,58],48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},o($Vi,[2,37]),{43:[1,264]},{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,44:[2,57],48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{2:$V0,4:265,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},{2:$V0,6:38,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,20:16,21:19,22:18,25:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,40:$V8,43:$V9,44:[1,266],48:$Va,57:$Vb,60:$Vc,62:$Vd,63:$Ve,68:$Vf,70:$Vg,71:$Vh},o($V61,[2,40])],
defaultActions: {32:[2,23],33:[2,24],34:[2,25],35:[2,26],36:[2,27],37:[2,1],225:[2,68]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {B_datos}=require('../BaseDatos/B_datos.ts');
    let bDatos=B_datos.getInstance(); 
	const {Type} =require('../Symbols/Type');
    const {TypeAritmeticas}= require('../Expresion/TypeAritmeticas.ts');
    const {TypeRelacionales}= require('../Expresion/TypeRelacionales.ts');
    const {TypeLogic}= require('../Expresion/TypeLogic.ts');
    const {Literal}= require('../Expresion/Literal.ts');
    const {Declaracion}= require('../Instruccion/Declaracion.ts');
    const {Asignacion} = require('../Instruccion/Asignacion.ts')
    const {OAritmeticas}= require('../Expresion/OAritmeticas.ts');
    const {IncDecremento}=require('../Expresion/IncDecremento.ts');
    const {ORelacionales}= require('../Expresion/ORelacionales.ts');
    const {OLogicas}= require('../Expresion/OLogicas.ts');
    
    //NATIVAS
    const {Print}= require('../Instruccion/FuncionesNativas/Print.ts');
    const {Println}= require('../Instruccion/FuncionesNativas/Println.ts');
    const {Typeof}=require('../Instruccion/FuncionesNativas/Typeof.ts')

    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3: console.log("Reconocio : " + yy_.yytext);  return 91 
break;
case 4: console.log("Reconocio : " + yy_.yytext);  return 92 
break;
case 5: console.log("Reconocio : " + yy_.yytext);  return 81 
break;
case 6: console.log("Reconocio : " + yy_.yytext);  return 82 
break;
case 7: console.log("Reconocio : " + yy_.yytext);  return 41 
break;
case 8: console.log("Reconocio : " + yy_.yytext);  return 42 
break;
case 9: console.log("Reconocio : " + yy_.yytext);  return 'corchetea' 
break;
case 10: console.log("Reconocio : " + yy_.yytext);  return 'corchetec' 
break;
case 11: console.log("Reconocio : " + yy_.yytext);  return 43 
break;
case 12: console.log("Reconocio : " + yy_.yytext);  return 44 
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 26 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 19 
break;
case 15: console.log("Reconocio : " + yy_.yytext);  return 23 
break;
case 16: console.log("Reconocio : " + yy_.yytext);  return 'interrogacion' 
break;
case 17: console.log("Reconocio : " + yy_.yytext);  return 54 
break;
case 18: console.log("Reconocio : " + yy_.yytext);  return 75 
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 76 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 80 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 78 
break;
case 22: console.log("Reconocio : " + yy_.yytext);  return 77 
break;
case 23: console.log("Reconocio : " + yy_.yytext);  return 79 
break;
case 24: console.log("Reconocio : " + yy_.yytext);  return 84 
break;
case 25: console.log("Reconocio : " + yy_.yytext);  return 83 
break;
case 26: console.log("Reconocio : " + yy_.yytext);  return 86 
break;
case 27: console.log("Reconocio : " + yy_.yytext);  return 85 
break;
case 28: console.log("Reconocio : " + yy_.yytext);  return 87 
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 88 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 90 
break;
case 31: console.log("Reconocio : " + yy_.yytext);  return 89 
break;
case 32:console.log("Reconocio: "+yy_.yytext); return 28
break;
case 33:console.log("Reconocio: "+yy_.yytext); return 29
break;
case 34:console.log("Reconocio: "+yy_.yytext); return 30
break;
case 35:console.log("Reconocio: "+yy_.yytext); return 31
break;
case 36:console.log("Reconocio: "+yy_.yytext); return 32
break;
case 37:console.log("Reconocio: "+yy_.yytext); return 25
break;
case 38:console.log("Reconocio: "+yy_.yytext); return 38
break;
case 39:console.log("Reconocio: "+yy_.yytext); return 39
break;
case 40:console.log("Reconocio: "+yy_.yytext); return 40
break;
case 41:console.log("Reconocio: "+yy_.yytext); return 46
break;
case 42:console.log("Reconocio: "+yy_.yytext); return 48
break;
case 43:console.log("Reconocio: "+yy_.yytext); return 53
break;
case 44:console.log("Reconocio: "+yy_.yytext); return 56
break;
case 45:console.log("Reconocio: "+yy_.yytext); return 60
break;
case 46:console.log("Reconocio: "+yy_.yytext); return 62
break;
case 47:console.log("Reconocio: "+yy_.yytext); return 57
break;
case 48:console.log("Reconocio: "+yy_.yytext); return 55
break;
case 49:console.log("Reconocio: "+yy_.yytext); return 59
break;
case 50:console.log("Reconocio: "+yy_.yytext); return 66
break;
case 51:console.log("Reconocio: "+yy_.yytext); return 70
break;
case 52:console.log("Reconocio: "+yy_.yytext); return 71
break;
case 53:console.log("Reconocio: "+yy_.yytext); return 74
break;
case 54:console.log("Reconocio: "+yy_.yytext); return 63
break;
case 55:console.log("Reconocio: "+yy_.yytext); return 'length'
break;
case 56:console.log("Reconocio: "+yy_.yytext); return 68
break;
case 57:console.log("Reconocio: "+yy_.yytext); return 27
break;
case 58:console.log("Reconocio: "+yy_.yytext); return 34
break;
case 59:console.log("Reconocio: "+yy_.yytext); return 36
break;
case 60:console.log("Reconocio ENTERO: "+yy_.yytext); return 37
break;
case 61:console.log("Reconocio: "+yy_.yytext); return 35
break;
case 62:return 5;
break;
case 63:
            bDatos.addError("Lexico","Caracter no reconocido",yy_.yylloc.first_line,yy_.yylloc.first_column);
            console.log('Este error es un error lexico: '+yy_.yytext+' en al linea '+yy_.yylloc.first_line+' en la columna '+yy_.yylloc.first_column);
        
break;
}
},
rules: [/^(?:[ \r\t\n\s]+)/i,/^(?:\/\/.*)/i,/^(?:\/\*([\n]|[^"*/"]|\*)*\*\/)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:;)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:const\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:typeof\b)/i,/^(?:void\b)/i,/^(?:length\b)/i,/^(?:call\b)/i,/^(?:(([a-zA-ZñÑ]+)(([a-zA-ZñÑ]+)|([0-9]+)|_)*))/i,/^(?:("(([^\"\n])|(\\[\'\"\\nrt]))*"))/i,/^(?:(([0-9]+)(\.([0-9]+))))/i,/^(?:([0-9]+))/i,/^(?:('(([^\'\n])|(\\[\'\"\\nrt]))'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}