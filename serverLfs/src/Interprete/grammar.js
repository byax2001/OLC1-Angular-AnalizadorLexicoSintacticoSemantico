/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,12],$V2=[1,13],$V3=[1,14],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,27],$V8=[1,38],$V9=[1,39],$Va=[1,40],$Vb=[1,41],$Vc=[1,42],$Vd=[1,28],$Ve=[1,29],$Vf=[1,37],$Vg=[1,30],$Vh=[1,31],$Vi=[1,32],$Vj=[1,35],$Vk=[1,36],$Vl=[1,34],$Vm=[1,33],$Vn=[2,5,16,17,18,26,27,28,32,34,35,36,37,38,46,50,51,53,56,58,59,60,61,62,64,66,67],$Vo=[2,5,16,17,18,26,27,28,32,34,35,36,37,38,46,49,50,51,53,56,58,59,60,61,62,64,66,67],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,60],$Vt=[1,61],$Vu=[1,62],$Vv=[1,63],$Vw=[1,64],$Vx=[1,65],$Vy=[1,56],$Vz=[1,66],$VA=[1,51],$VB=[1,52],$VC=[2,32],$VD=[1,72],$VE=[1,77],$VF=[1,94],$VG=[1,93],$VH=[1,95],$VI=[1,96],$VJ=[1,97],$VK=[1,98],$VL=[1,99],$VM=[1,100],$VN=[1,101],$VO=[1,102],$VP=[1,103],$VQ=[1,104],$VR=[1,105],$VS=[1,106],$VT=[1,107],$VU=[8,33,48,57,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],$VV=[8,31,33],$VW=[1,129],$VX=[1,163],$VY=[33,48],$VZ=[8,33,48,57,70,71,76,77,78,79,80,81,82,83,84],$V_=[8,33,48,57,70,71,72,73,74,76,77,78,79,80,81,82,83,84],$V$=[8,33,48,57,76,77,78,79,80,81,82,83,84],$V01=[8,33,48,57,82,83],$V11=[1,184],$V21=[2,45],$V31=[1,200],$V41=[1,206],$V51=[1,205],$V61=[53,56,58],$V71=[53,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"ASIGNACION":7,"puntoycoma":8,"DECLARACION":9,"IF":10,"IF_SINLLAVES":11,"SWITCH":12,"FOR":13,"WHILE":14,"DO_WHILE":15,"break":16,"continue":17,"return":18,"EXPRESION":19,"N_PRINT":20,"N_PRINTLN":21,"FUNCIONES":22,"METODOS":23,"LLAMADA":24,"BLOQUE_INST":25,"id":26,"inc":27,"dec":28,"TIPOVAR":29,"CONJID":30,"igual":31,"const":32,"coma":33,"int":34,"double":35,"boolean":36,"char":37,"string":38,"TIPODATO":39,"cadena":40,"caracter":41,"decimal":42,"entero":43,"true":44,"false":45,"if":46,"parentesisa":47,"parentesisc":48,"else":49,"switch":50,"llavea":51,"CASES_LIST":52,"llavec":53,"DEFAULT":54,"CASE":55,"case":56,"dospuntos":57,"default":58,"for":59,"while":60,"do":61,"void":62,"PARAMETROS":63,"call":64,"PARAMETROSLLAMADA":65,"println":66,"print":67,"N_TYPEOF":68,"typeof":69,"menos":70,"mas":71,"div":72,"multi":73,"mod":74,"pow":75,"igualigual":76,"diferente":77,"menorque":78,"menorigual":79,"mayorque":80,"mayorigual":81,"or":82,"and":83,"xor":84,"not":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"puntoycoma",16:"break",17:"continue",18:"return",26:"id",27:"inc",28:"dec",31:"igual",32:"const",33:"coma",34:"int",35:"double",36:"boolean",37:"char",38:"string",40:"cadena",41:"caracter",42:"decimal",43:"entero",44:"true",45:"false",46:"if",47:"parentesisa",48:"parentesisc",49:"else",50:"switch",51:"llavea",53:"llavec",56:"case",57:"dospuntos",58:"default",59:"for",60:"while",61:"do",62:"void",64:"call",66:"println",67:"print",69:"typeof",70:"menos",71:"mas",72:"div",73:"multi",74:"mod",75:"pow",76:"igualigual",77:"diferente",78:"menorque",79:"menorigual",80:"mayorque",81:"mayorigual",82:"or",83:"and",84:"xor",85:"not"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,3],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,3],[6,3],[6,3],[6,3],[6,2],[9,4],[9,5],[9,2],[7,3],[30,3],[30,1],[29,1],[29,1],[29,1],[29,1],[29,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[10,5],[10,7],[10,7],[11,5],[11,7],[11,7],[12,7],[12,8],[12,7],[12,8],[12,9],[52,2],[52,1],[55,4],[55,3],[54,3],[54,2],[13,9],[13,9],[14,5],[15,7],[23,6],[23,5],[22,6],[22,5],[63,4],[63,2],[24,5],[24,4],[24,4],[24,3],[65,3],[65,1],[21,4],[21,3],[20,4],[20,3],[68,4],[25,3],[25,2],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,2],[19,2],[19,2],[19,2],[19,3],[19,1],[19,1],[19,3],[19,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("termine de analizar" ); return this.$; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];   
break;
case 3:
this.$= [$$[$0]];
break;
case 4: case 5: case 16: case 17: case 20:
this.$= $$[$0-1];
break;
case 6: case 7: case 8: case 18: case 19:
this.$= $$[$0];
break;
case 9: case 10: case 11: case 60: case 107: case 108: case 110:
this.$=$$[$0];
break;
case 12:
this.$= new Break(_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 13:
this.$= new Continue(_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 14:
this.$= new Return(null,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 15:
this.$= new Return($$[$0-1],_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 21:
this.$=new BloqueInstSup($$[$0],_$[$0].first_line,_$[$0].last_column);
break;
case 22:
this.$=new IncDecremento ($$[$0-2],TypeAritmeticas.INCDER,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 23:
this.$=new IncDecremento ($$[$0-2],TypeAritmeticas.DECDER,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 24:
this.$=new IncDecremento ($$[$0-1],TypeAritmeticas.INCIZQ,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 25:
this.$=new IncDecremento ($$[$0-1],TypeAritmeticas.DECIZQ,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 26:
console.log("Error Sintactico, simbolo no esperado:"  + yytext 
                           + " linea: " + this._$.first_line
                           +" columna: "+ this._$.first_column);
                    bDatos.addError("Sintactico","No se esperaba este caracter "+yytext,_$[$0-1].first_line,_$[$0-1].last_column);    
                    this.$=new Nothing(_$[$0-1].first_line,_$[$0-1].last_column);
                    
break;
case 27:
this.$= new Declaracion(false,$$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 28:
this.$= new Declaracion(true,$$[$0-3],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 29:
this.$= new Declaracion(false,$$[$0-1],$$[$0],null,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 30:
this.$=new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].last_column)
break;
case 31:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 32:
  this.$=[$$[$0]];   
break;
case 33:
this.$=Type.INT;
break;
case 34:
this.$=Type.DOUBLE;
break;
case 35:
this.$=Type.BOOLEAN;
break;
case 36:
this.$=Type.CHAR;
break;
case 37:
this.$=Type.STRING;
break;
case 38:
this.$= new Literal($$[$0],Type.STRING,_$[$0].first_line,_$[$0].last_column);
break;
case 39:
this.$= new Literal($$[$0],Type.CHAR,_$[$0].first_line,_$[$0].last_column);
break;
case 40:
this.$= new Literal($$[$0],Type.DOUBLE,_$[$0].first_line,_$[$0].last_column);
break;
case 41:
this.$= new Literal($$[$0],Type.ID,_$[$0].first_line,_$[$0].last_column);
break;
case 42:
this.$= new Literal($$[$0],Type.INT,_$[$0].first_line,_$[$0].last_column);
break;
case 43: case 44:
this.$= new Literal($$[$0],Type.BOOLEAN,_$[$0].first_line,_$[$0].last_column);
break;
case 45: case 48:
this.$=new If($$[$0-2],$$[$0],[],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 46: case 49:
this.$= new If($$[$0-4],$$[$0-2],$$[$0],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 47: case 50:
this.$= new If($$[$0-4],$$[$0-2],[$$[$0]],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 51:
this.$=new Switch($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 52:
$$[$0-2].push($$[$0-1]);   this.$=new Switch($$[$0-5],$$[$0-2],_$[$0-7].first_line,_$[$0-7].last_column);
break;
case 53:
this.$= new Switch($$[$0-4],[$$[$0-1]],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 54:
$$[$0-1].push($$[$0-2]);     this.$= new Switch($$[$0-5],$$[$0-1],_$[$0-7].first_line,_$[$0-7].last_column);
break;
case 55:
$$[$0-3].push($$[$0-2]);  $$[$0-3].concat($$[$0-1]);   this.$= new Switch($$[$0-6],$$[$0-3],_$[$0-8].first_line,_$[$0-8].last_column);
break;
case 56:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 57: case 77:
this.$=[$$[$0]];
break;
case 58:
this.$= new Case($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 59:
this.$= new Case($$[$0-1],[],_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 61: case 84:
this.$=[new Nothing(_$[$0-1].first_line,_$[$0-1].last_column)];
break;
case 62: case 63:
this.$=new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].last_column);
break;
case 64:
this.$=new While($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 65:
this.$=new Dowhile($$[$0-2],$$[$0-5],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 66:
this.$= new Metodo($$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].last_column);
break;
case 67:
this.$= new Metodo($$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 68:
this.$= new Funcion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].last_column);
break;
case 69:
this.$= new Funcion($$[$0-4],$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 70:
$$[$0-3].push(new Declaracion(false,$$[$0-1],[$$[$0]],null,_$[$0-3].first_line,_$[$0-3].last_column)); this.$=$$[$0-3];
break;
case 71:
this.$=[new Declaracion(false,$$[$0-1],[$$[$0]],null,_$[$0-1].first_line,_$[$0-1].last_column)]
break;
case 72:
this.$=new Call($$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].last_column)
break;
case 73:
this.$=new Call($$[$0-2],[],_$[$0-3].first_line,_$[$0-3].last_column)
break;
case 74:
this.$=new Call($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column)
break;
case 75:
this.$=new Call($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].last_column)
break;
case 76:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 78:
this.$=new Println($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 79:
this.$=new Println(null,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 80:
this.$=new Print($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 81:
this.$=new Print(null,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 82:
this.$=new Typeof($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 83: case 106:
this.$=$$[$0-1];
break;
case 85:
this.$=new OAritmeticas($$[$0],null,TypeAritmeticas.NEGACION,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 86:
this.$=new OAritmeticas($$[$0-2],$$[$0],TypeAritmeticas.SUMA,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 87:
this.$=new OAritmeticas($$[$0-2],$$[$0],TypeAritmeticas.RESTA,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 88:
this.$=new OAritmeticas($$[$0-2],$$[$0],TypeAritmeticas.DIVISION,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 89:
this.$=new OAritmeticas($$[$0-2],$$[$0],TypeAritmeticas.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 90:
this.$=new OAritmeticas($$[$0-2],$$[$0],TypeAritmeticas.MOD,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 91:
this.$=new OAritmeticas($$[$0-2],$$[$0],TypeAritmeticas.POW,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 92:
this.$=new ORelacionales($$[$0-2],$$[$0],TypeRelacionales.IGUALQUE,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 93:
this.$=new ORelacionales($$[$0-2],$$[$0],TypeRelacionales.DIFERENTEQUE,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 94:
this.$=new ORelacionales($$[$0-2],$$[$0],TypeRelacionales.MENORQUE,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 95:
this.$=new ORelacionales($$[$0-2],$$[$0],TypeRelacionales.MENORIGUALQUE,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 96:
this.$=new ORelacionales($$[$0-2],$$[$0],TypeRelacionales.MAYORQUE,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 97:
this.$=new ORelacionales($$[$0-2],$$[$0],TypeRelacionales.MAYORIGUALQUE,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 98:
this.$=new OLogicas($$[$0-2],$$[$0],TypeLogic.OR,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 99:
this.$=new OLogicas($$[$0-2],$$[$0],TypeLogic.AND,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 100:
this.$=new OLogicas($$[$0-2],$$[$0],TypeLogic.XOR,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 101:
this.$=new  OLogicas($$[$0],null,TypeLogic.NOT,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 102:
this.$=new IncDecremento ($$[$0-1],TypeAritmeticas.INCDER,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 103:
this.$=new IncDecremento ($$[$0],TypeAritmeticas.INCIZQ,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 104:
this.$=new IncDecremento ($$[$0-1],TypeAritmeticas.DECDER,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 105:
this.$=new IncDecremento ($$[$0],TypeAritmeticas.DECIZQ,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 109:
this.$=new Asignacion([$$[$0-2]],$$[$0],_$[$0-2].first_line,_$[$0-2].last_column)
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:$V3,20:15,21:16,22:17,23:18,24:19,25:20,26:$V4,27:$V5,28:$V6,29:26,30:25,32:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,46:$Vd,50:$Ve,51:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,64:$Vk,66:$Vl,67:$Vm},{1:[3]},{2:$V0,5:[1,43],6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:$V3,20:15,21:16,22:17,23:18,24:19,25:20,26:$V4,27:$V5,28:$V6,29:26,30:25,32:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,46:$Vd,50:$Ve,51:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,64:$Vk,66:$Vl,67:$Vm},o($Vn,[2,3]),{8:[1,45]},{8:[1,46]},o($Vo,[2,6]),o($Vo,[2,7]),o($Vo,[2,8]),o($Vo,[2,9]),o($Vo,[2,10]),o($Vo,[2,11]),{8:[1,47]},{8:[1,48]},{8:[1,49],19:50,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{8:[1,67]},{8:[1,68]},o($Vo,[2,18]),o($Vo,[2,19]),{8:[1,69]},o($Vo,[2,21]),o([31,33],$VC,{27:[1,70],28:[1,71],47:$VD}),{26:[1,73]},{26:[1,74]},{8:[1,75]},{31:[1,76],33:$VE},{26:[1,79],30:78},{29:80,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc},{47:[1,81]},{47:[1,82]},{47:[1,83]},{47:[1,84]},{25:85,51:$Vf},{47:[1,86]},{47:[1,87]},{26:[1,88]},{26:[1,89]},{2:$V0,4:90,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:$V3,20:15,21:16,22:17,23:18,24:19,25:20,26:$V4,27:$V5,28:$V6,29:26,30:25,32:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,46:$Vd,50:$Ve,51:$Vf,53:[1,91],59:$Vg,60:$Vh,61:$Vi,62:$Vj,64:$Vk,66:$Vl,67:$Vm},{26:[2,33]},{26:[2,34]},{26:[2,35]},{26:[2,36]},{26:[2,37]},{1:[2,1]},o($Vn,[2,2]),o($Vo,[2,4]),o($Vo,[2,5]),o($Vo,[2,12]),o($Vo,[2,13]),o($Vo,[2,14]),{8:[1,92],70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT},{19:108,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:109,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},o($VU,[2,41],{27:[1,110],28:[1,111],31:[1,112],47:$VD}),{26:[1,113]},{26:[1,114]},{19:115,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},o($VU,[2,107]),o($VU,[2,108]),o($VU,[2,110]),o($VU,[2,38]),o($VU,[2,39]),o($VU,[2,40]),o($VU,[2,42]),o($VU,[2,43]),o($VU,[2,44]),{47:[1,116]},o($Vo,[2,16]),o($Vo,[2,17]),o($Vo,[2,20]),{8:[1,117]},{8:[1,118]},{19:121,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,48:[1,120],64:$Vk,65:119,68:58,69:$Vz,70:$VA,85:$VB},{8:[1,122]},{8:[1,123]},o($Vo,[2,26]),{19:124,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{26:[1,125]},{8:[2,29],31:[1,126],33:$VE},o($VV,$VC,{47:[1,127]}),{26:$VW,30:128},{19:130,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:131,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{7:133,9:132,26:$VW,29:134,30:25,32:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc},{19:135,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{60:[1,136]},{19:137,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,48:[1,138],64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:139,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,48:[1,140],64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{47:[1,141]},{47:[1,142]},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:$V3,20:15,21:16,22:17,23:18,24:19,25:20,26:$V4,27:$V5,28:$V6,29:26,30:25,32:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,46:$Vd,50:$Ve,51:$Vf,53:[1,143],59:$Vg,60:$Vh,61:$Vi,62:$Vj,64:$Vk,66:$Vl,67:$Vm},o($Vo,[2,84]),o($Vo,[2,15]),{19:144,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:145,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:146,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:147,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:148,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:149,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:150,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:151,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:152,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:153,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:154,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:155,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:156,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:157,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:158,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},o($VU,[2,85]),o($VU,[2,101]),o($VU,[2,102]),o($VU,[2,104]),{19:159,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},o($VU,[2,103]),o($VU,[2,105]),{48:[1,160],70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT},{19:161,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},o($Vo,[2,22]),o($Vo,[2,23]),{33:$VX,48:[1,162]},o($VU,[2,75]),o($VY,[2,77],{70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT}),o($Vo,[2,24]),o($Vo,[2,25]),{8:[2,30],70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT},o($VV,[2,31]),{19:164,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{29:167,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,48:[1,166],63:165},{31:[1,168],33:$VE},o($VV,$VC),{48:[1,169],70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT},{48:[1,170],70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT},{8:[1,171]},{8:[1,172]},{26:$VW,30:78},{48:[1,173],70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT},{47:[1,174]},{48:[1,175],70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT},{8:[2,81]},{48:[1,176],70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT},{8:[2,79]},{29:167,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,48:[1,178],63:177},{19:121,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,48:[1,180],64:$Vk,65:179,68:58,69:$Vz,70:$VA,85:$VB},o($Vo,[2,83]),o($VZ,[2,86],{72:$VH,73:$VI,74:$VJ,75:$VK}),o($VZ,[2,87],{72:$VH,73:$VI,74:$VJ,75:$VK}),o($V_,[2,88],{75:$VK}),o($V_,[2,89],{75:$VK}),o($V_,[2,90],{75:$VK}),o($V_,[2,91],{75:$VK}),o($V$,[2,92],{70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK}),o($V$,[2,93],{70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK}),o($V$,[2,94],{70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK}),o($V$,[2,95],{70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK}),o($V$,[2,96],{70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK}),o($V$,[2,97],{70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK}),o([8,33,48,57,82],[2,98],{70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,83:$VS,84:$VT}),o($V01,[2,99],{70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,84:$VT}),o($V01,[2,100],{70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,84:$VT}),o([8,33,48,57],[2,109],{70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT}),o($VU,[2,106]),{48:[1,181],70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT},o($VU,[2,74]),{19:182,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{8:[2,27],70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT},{33:$V11,48:[1,183]},{25:185,51:$Vf},{26:[1,186]},{19:187,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{2:$V0,6:189,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:$V3,20:15,21:16,22:17,23:18,24:19,25:188,26:$V4,27:$V5,28:$V6,29:26,30:25,32:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,46:$Vd,50:$Ve,51:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,64:$Vk,66:$Vl,67:$Vm},{51:[1,190]},{19:191,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:192,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{25:193,51:$Vf},{19:194,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{8:[2,80]},{8:[2,78]},{33:$V11,48:[1,195]},{25:196,51:$Vf},{33:$VX,48:[1,197]},o($VU,[2,73]),o($VU,[2,82]),o($VY,[2,76],{70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT}),{25:198,51:$Vf},{29:199,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc},o($Vo,[2,69]),o($VY,[2,71]),{8:[2,28],70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT},o($Vn,$V21,{49:$V31}),o($Vn,[2,48],{49:[1,201]}),{52:202,54:203,55:204,56:$V41,58:$V51},{8:[1,207],70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT},{8:[1,208],70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT},o($Vo,[2,64]),{48:[1,209],70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT},{25:210,51:$Vf},o($Vo,[2,67]),o($VU,[2,72]),o($Vo,[2,68]),{26:[1,211]},{10:213,25:212,46:[1,214],51:$Vf},{2:$V0,6:215,7:4,9:5,10:6,11:216,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:$V3,20:15,21:16,22:17,23:18,24:19,25:20,26:$V4,27:$V5,28:$V6,29:26,30:25,32:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,46:$Vd,50:$Ve,51:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,64:$Vk,66:$Vl,67:$Vm},{53:[1,217],54:218,55:219,56:$V41,58:$V51},{52:221,53:[1,220],55:204,56:$V41},o($V61,[2,57]),{57:[1,222]},{19:223,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:224,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{19:225,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},{8:[1,226]},o($Vo,[2,66]),o($VY,[2,70]),o($Vo,[2,46]),o($Vo,[2,47]),{47:[1,227]},o($Vo,[2,49]),o($Vo,[2,50]),o($Vo,[2,51]),{52:229,53:[1,228],55:204,56:$V41},o($V61,[2,56]),o($Vo,[2,53]),{53:[1,230],55:219,56:$V41},o($V71,[2,61],{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,20:15,21:16,22:17,23:18,24:19,25:20,30:25,29:26,4:231,2:$V0,16:$V1,17:$V2,18:$V3,26:$V4,27:$V5,28:$V6,32:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,46:$Vd,50:$Ve,51:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,64:$Vk,66:$Vl,67:$Vm}),{57:[1,232],70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT},{48:[1,233],70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT},{48:[1,234],70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT},o($Vo,[2,65]),{19:235,24:59,26:$Vp,27:$Vq,28:$Vr,39:57,40:$Vs,41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,47:$Vy,64:$Vk,68:58,69:$Vz,70:$VA,85:$VB},o($Vo,[2,52]),{53:[1,236],55:219,56:$V41},o($Vo,[2,54]),o($V71,[2,60],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,20:15,21:16,22:17,23:18,24:19,25:20,30:25,29:26,6:44,2:$V0,16:$V1,17:$V2,18:$V3,26:$V4,27:$V5,28:$V6,32:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,46:$Vd,50:$Ve,51:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,64:$Vk,66:$Vl,67:$Vm}),o($V61,[2,59],{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,20:15,21:16,22:17,23:18,24:19,25:20,30:25,29:26,4:237,2:$V0,16:$V1,17:$V2,18:$V3,26:$V4,27:$V5,28:$V6,32:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,46:$Vd,50:$Ve,51:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,64:$Vk,66:$Vl,67:$Vm}),{25:238,51:$Vf},{25:239,51:$Vf},{48:[1,240],70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT},o($Vo,[2,55]),o($V61,[2,58],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,20:15,21:16,22:17,23:18,24:19,25:20,30:25,29:26,6:44,2:$V0,16:$V1,17:$V2,18:$V3,26:$V4,27:$V5,28:$V6,32:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,46:$Vd,50:$Ve,51:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,64:$Vk,66:$Vl,67:$Vm}),o($Vo,[2,62]),o($Vo,[2,63]),{25:241,51:$Vf},o($Vn,$V21,{49:$V31})],
defaultActions: {38:[2,33],39:[2,34],40:[2,35],41:[2,36],42:[2,37],43:[2,1],138:[2,81],140:[2,79],175:[2,80],176:[2,78]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {B_datos}=require('../BaseDatos/B_datos.ts');
    let bDatos=B_datos.getInstance(); 
	const {Type} =require('../Symbols/Type');
    const {TypeAritmeticas}= require('../Expresion/TypeAritmeticas.ts');
    const {TypeRelacionales}= require('../Expresion/TypeRelacionales.ts');
    const {TypeLogic}= require('../Expresion/TypeLogic.ts');
    const {Literal}= require('../Expresion/Literal.ts');
    const {Declaracion}= require('../Instruccion/Declaracion.ts');
    const {Asignacion} = require('../Instruccion/Asignacion.ts')
    const {OAritmeticas}= require('../Expresion/OAritmeticas.ts');
    const {IncDecremento}=require('../Expresion/IncDecremento.ts');
    const {ORelacionales}= require('../Expresion/ORelacionales.ts');
    const {OLogicas}= require('../Expresion/OLogicas.ts');
    const {If} = require('../Instruccion/If.ts');
    const {While} = require('../Instruccion/While.ts');
    const {Dowhile} = require('../Instruccion/Dowhile.ts');
    const {For}= require('../Instruccion/For.ts');
    const {Switch}= require('../Instruccion/Switch.ts');
    const {Case} = require('../Instruccion/Case.ts');

    //SALTOS DE SENTENCIAS
    const {Break}= require('../Instruccion/Break.ts');
    const {Continue}= require('../Instruccion/Continue.ts');
    const {Return}= require('../Instruccion/Return.ts');

    //NATIVAS
    const {Print}= require('../Instruccion/FuncionesNativas/Print.ts');
    const {Println}= require('../Instruccion/FuncionesNativas/Println.ts');
    const {Typeof}=require('../Instruccion/FuncionesNativas/Typeof.ts')

    //METODOS Y FUNCIONES
    const {Metodo}= require('../Instruccion/Metodo.ts');
    const {Funcion}= require('../Instruccion/Funcion.ts');
    const {Call}= require('../Instruccion/Call.ts');

    //EXTRAS
    const {Nothing}= require('../Instruccion/Nothing.ts');
    const {BloqueInstSup}= require('../Instruccion/BloqueInstSup.ts');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3: console.log("Reconocio : " + yy_.yytext);  return 27 
break;
case 4: console.log("Reconocio : " + yy_.yytext);  return 28 
break;
case 5: console.log("Reconocio : " + yy_.yytext);  return 76 
break;
case 6: console.log("Reconocio : " + yy_.yytext);  return 77 
break;
case 7: console.log("Reconocio : " + yy_.yytext);  return 47 
break;
case 8: console.log("Reconocio : " + yy_.yytext);  return 48 
break;
case 9: console.log("Reconocio : " + yy_.yytext);  return 'corchetea' 
break;
case 10: console.log("Reconocio : " + yy_.yytext);  return 'corchetec' 
break;
case 11: console.log("Reconocio : " + yy_.yytext);  return 51 
break;
case 12: console.log("Reconocio : " + yy_.yytext);  return 53 
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 33 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 8 
break;
case 15: console.log("Reconocio : " + yy_.yytext);  return 31 
break;
case 16: console.log("Reconocio : " + yy_.yytext);  return 'interrogacion' 
break;
case 17: console.log("Reconocio : " + yy_.yytext);  return 57 
break;
case 18: console.log("Reconocio : " + yy_.yytext);  return 71 
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 70 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 75 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 73 
break;
case 22: console.log("Reconocio : " + yy_.yytext);  return 72 
break;
case 23: console.log("Reconocio : " + yy_.yytext);  return 74 
break;
case 24: console.log("Reconocio : " + yy_.yytext);  return 79 
break;
case 25: console.log("Reconocio : " + yy_.yytext);  return 78 
break;
case 26: console.log("Reconocio : " + yy_.yytext);  return 81 
break;
case 27: console.log("Reconocio : " + yy_.yytext);  return 80 
break;
case 28: console.log("Reconocio : " + yy_.yytext);  return 82 
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 83 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 85 
break;
case 31: console.log("Reconocio : " + yy_.yytext);  return 84 
break;
case 32:console.log("Reconocio: "+yy_.yytext); return 34
break;
case 33:console.log("Reconocio: "+yy_.yytext); return 35
break;
case 34:console.log("Reconocio: "+yy_.yytext); return 36
break;
case 35:console.log("Reconocio: "+yy_.yytext); return 37
break;
case 36:console.log("Reconocio: "+yy_.yytext); return 38
break;
case 37:console.log("Reconocio: "+yy_.yytext); return 32
break;
case 38:console.log("Reconocio: "+yy_.yytext); return 44
break;
case 39:console.log("Reconocio: "+yy_.yytext); return 45
break;
case 40:console.log("Reconocio: "+yy_.yytext); return 46
break;
case 41:console.log("Reconocio: "+yy_.yytext); return 49
break;
case 42:console.log("Reconocio: "+yy_.yytext); return 50
break;
case 43:console.log("Reconocio: "+yy_.yytext); return 56
break;
case 44:console.log("Reconocio: "+yy_.yytext); return 58
break;
case 45:console.log("Reconocio: "+yy_.yytext); return 60
break;
case 46:console.log("Reconocio: "+yy_.yytext); return 61
break;
case 47:console.log("Reconocio: "+yy_.yytext); return 59
break;
case 48:console.log("Reconocio: "+yy_.yytext); return 16
break;
case 49:console.log("Reconocio: "+yy_.yytext); return 17
break;
case 50:console.log("Reconocio: "+yy_.yytext); return 18
break;
case 51:console.log("Reconocio: "+yy_.yytext); return 66
break;
case 52:console.log("Reconocio: "+yy_.yytext); return 67
break;
case 53:console.log("Reconocio: "+yy_.yytext); return 69
break;
case 54:console.log("Reconocio: "+yy_.yytext); return 62
break;
case 55:console.log("Reconocio: "+yy_.yytext); return 'length'
break;
case 56:console.log("Reconocio: "+yy_.yytext); return 64
break;
case 57:console.log("Reconocio: "+yy_.yytext); return 26
break;
case 58:console.log("Reconocio: "+yy_.yytext); return 40
break;
case 59:console.log("Reconocio: "+yy_.yytext); return 42
break;
case 60:console.log("Reconocio ENTERO: "+yy_.yytext); return 43
break;
case 61:console.log("Reconocio: "+yy_.yytext); return 41
break;
case 62:return 5;
break;
case 63:
            bDatos.addError("Lexico","Caracter no reconocido "+yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column);
            console.log('Este error es un error lexico: '+yy_.yytext+' en al linea '+yy_.yylloc.first_line+' en la columna '+yy_.yylloc.first_column);
        
break;
}
},
rules: [/^(?:[ \r\t\n\s]+)/i,/^(?:\/\/.*)/i,/^(?:[/][*]([\n]|[^"*/"]|\*|\/)*[*][/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:;)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:const\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:typeof\b)/i,/^(?:void\b)/i,/^(?:length\b)/i,/^(?:call\b)/i,/^(?:(([a-zA-ZñÑ]+)(([a-zA-ZñÑ]+)|([0-9]+)|_)*))/i,/^(?:("((\\([\'\"\\nrt]))|([^\"\n]))*"))/i,/^(?:(([0-9]+)(\.([0-9]+))))/i,/^(?:([0-9]+))/i,/^(?:('(([^\'\n])|(\\([\'\"\\nrt])))'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}