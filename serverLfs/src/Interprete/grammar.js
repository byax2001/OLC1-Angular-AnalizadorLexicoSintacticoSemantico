/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,11],$V2=[1,12],$V3=[1,17],$V4=[1,19],$V5=[1,27],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[1,31],$Va=[1,20],$Vb=[1,21],$Vc=[1,22],$Vd=[1,23],$Ve=[1,24],$Vf=[1,25],$Vg=[1,26],$Vh=[2,5,14,15,21,24,25,26,27,28,29,37,41,45,50,52,53,54,56,57,59,60,63,66],$Vi=[1,35],$Vj=[1,49],$Vk=[1,55],$Vl=[1,56],$Vm=[1,57],$Vn=[1,58],$Vo=[1,59],$Vp=[1,60],$Vq=[1,52],$Vr=[1,61],$Vs=[1,47],$Vt=[1,48],$Vu=[1,50],$Vv=[1,51],$Vw=[1,65],$Vx=[1,77],$Vy=[1,81],$Vz=[1,82],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[1,86],$VE=[1,87],$VF=[1,88],$VG=[1,89],$VH=[1,90],$VI=[1,91],$VJ=[1,92],$VK=[1,93],$VL=[1,94],$VM=[1,95],$VN=[19,39,41,51,65,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],$VO=[2,28],$VP=[1,105],$VQ=[39,65],$VR=[2,5,14,15,21,24,25,26,27,28,29,31,32,33,34,35,36,37,38,41,45,50,52,53,54,56,57,59,60,63,66,74,76,90,91,92],$VS=[1,145],$VT=[19,39,41,51,65,75,76,81,82,83,84,85,86,87,88,89],$VU=[19,39,41,51,65,75,76,77,78,79,81,82,83,84,85,86,87,88,89],$VV=[19,39,41,51,65,81,82,83,84,85,86,87,88,89],$VW=[19,39,41,51,65,87,88],$VX=[1,172],$VY=[1,171],$VZ=[41,50,53],$V_=[2,5,14,15,21,24,25,26,27,28,29,37,41,43,45,50,52,53,54,56,57,59,60,63,66],$V$=[1,213],$V01=[41,50],$V11=[1,218];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"ASIGNACION":7,"DECLARACION":8,"IF":9,"SWITCH":10,"FOR":11,"WHILE":12,"DO_WHILE":13,"PRINT":14,"PRINTLN":15,"FUNCIONES":16,"METODOS":17,"LLAMADA":18,"puntoycoma":19,"TIPOVAR":20,"id":21,"igual":22,"EXPRESION":23,"const":24,"int":25,"double":26,"boolean":27,"char":28,"string":29,"TIPODATO":30,"cadena":31,"caracter":32,"decimal":33,"entero":34,"true":35,"false":36,"if":37,"parentesisa":38,"parentesisc":39,"llavea":40,"llavec":41,"CELSEIF":42,"else":43,"ELSEIF":44,"switch":45,"INST_SWITCH":46,"CASES_LIST":47,"DEFAULT":48,"CASE":49,"case":50,"dospuntos":51,"break":52,"default":53,"for":54,"INST_FOR":55,"continue":56,"while":57,"INST_WHILE":58,"do":59,"void":60,"PARAMETROS":61,"INST_METODOS":62,"return":63,"INST_FUNCIONES":64,"coma":65,"call":66,"PARAMETROSLLAMADA":67,"N_PRINTLN":68,"println":69,"N_PRINT":70,"print":71,"arentesisc":72,"N_TYPEOF":73,"typeof":74,"mas":75,"menos":76,"div":77,"multi":78,"mod":79,"pow":80,"igualigual":81,"diferente":82,"menorque":83,"menorigual":84,"mayorque":85,"mayorigual":86,"or":87,"and":88,"xor":89,"not":90,"inc":91,"dec":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"PRINT",15:"PRINTLN",19:"puntoycoma",21:"id",22:"igual",24:"const",25:"int",26:"double",27:"boolean",28:"char",29:"string",31:"cadena",32:"caracter",33:"decimal",34:"entero",35:"true",36:"false",37:"if",38:"parentesisa",39:"parentesisc",40:"llavea",41:"llavec",43:"else",45:"switch",50:"case",51:"dospuntos",52:"break",53:"default",54:"for",56:"continue",57:"while",59:"do",60:"void",63:"return",65:"coma",66:"call",69:"println",71:"print",72:"arentesisc",74:"typeof",75:"mas",76:"menos",77:"div",78:"multi",79:"mod",80:"pow",81:"igualigual",82:"diferente",83:"menorque",84:"menorigual",85:"mayorque",86:"mayorigual",87:"or",88:"and",89:"xor",90:"not",91:"inc",92:"dec"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[8,5],[8,6],[7,4],[20,1],[20,1],[20,1],[20,1],[20,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[9,7],[9,8],[9,12],[42,2],[42,1],[44,8],[10,7],[46,1],[46,2],[46,3],[46,2],[46,1],[47,2],[47,1],[49,4],[49,6],[48,3],[48,5],[11,10],[11,10],[55,1],[55,3],[55,4],[55,3],[12,7],[13,9],[58,1],[58,3],[58,4],[58,3],[17,8],[17,7],[62,1],[62,2],[16,8],[16,7],[64,1],[64,3],[61,4],[61,2],[18,5],[18,4],[18,4],[18,3],[67,3],[67,1],[68,5],[68,5],[68,4],[70,5],[70,5],[70,4],[73,4],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,2],[23,2],[23,2],[23,2],[23,3],[23,1],[23,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("termine de analizar" ); return this.$; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];   
break;
case 3:
this.$= [$$[$0]];
break;
case 16:
console.log("Error Sintactico, simbolo no esperado:"  + yytext 
                           + " linea: " + this._$.first_line
                           +" columna: "+ this._$.first_column);
                           
break;
case 20: case 21: case 22: case 23: case 24:
this.$=$$[$0];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg},{1:[3]},{2:$V0,5:[1,32],6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg},o($Vh,[2,3]),o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,14]),{19:[1,34]},o($Vh,[2,16]),{22:$Vi,38:[1,36]},{21:[1,37]},{20:38,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9},{38:[1,39]},{38:[1,40]},{38:[1,41]},{38:[1,42]},{40:[1,43]},{21:[1,44]},{21:[1,45]},{21:[2,20]},{21:[2,21]},{21:[2,22]},{21:[2,23]},{21:[2,24]},{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,15]),{21:$Vj,23:46,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:$Vj,23:64,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,39:[1,63],67:62,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{22:$Vw,38:[1,66]},{21:[1,67]},{21:$Vj,23:68,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:$Vj,23:69,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{7:71,8:70,20:72,21:[1,73],24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9},{21:$Vj,23:74,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{2:$V0,4:76,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,45:$Vb,52:$Vx,54:$Vc,57:$Vd,58:75,59:$Ve,60:$Vf,66:$Vg},{38:[1,78]},{38:[1,79]},{19:[1,80],75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{21:$Vj,23:96,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:$Vj,23:97,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},o($VN,$VO,{91:[1,98],92:[1,99]}),{21:[1,100]},{21:[1,101]},{21:$Vj,23:102,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},o($VN,[2,107]),o($VN,[2,108]),o($VN,[2,25]),o($VN,[2,26]),o($VN,[2,27]),o($VN,[2,29]),o($VN,[2,30]),o($VN,[2,31]),{38:[1,103]},{39:[1,104],65:$VP},{19:[2,75]},o($VQ,[2,77],{75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),{21:$Vj,23:106,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{20:109,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,39:[1,108],61:107},{22:[1,110]},{39:[1,111],75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{39:[1,112],75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{21:$Vj,23:113,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:$Vj,23:114,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:[1,115]},{22:$Vi},{39:[1,116],75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{41:[1,117]},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,41:[2,58],45:$Vb,52:[1,118],54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg},{19:[1,119]},{20:109,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,39:[1,121],61:120},{21:$Vj,23:64,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,39:[1,123],67:122,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},o($VR,[2,19]),{21:$Vj,23:124,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:$Vj,23:125,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:$Vj,23:126,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:$Vj,23:127,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:$Vj,23:128,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:$Vj,23:129,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:$Vj,23:130,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:$Vj,23:131,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:$Vj,23:132,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:$Vj,23:133,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:$Vj,23:134,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:$Vj,23:135,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:$Vj,23:136,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:$Vj,23:137,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:$Vj,23:138,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},o($VN,[2,91]),o($VN,[2,101]),o($VN,[2,102]),o($VN,[2,103]),o($VN,[2,104]),o($VN,[2,105]),{39:[1,139],75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{21:[1,141],30:140,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp},{19:[2,74]},{21:$Vj,23:142,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{19:[1,143],75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{39:[1,144],65:$VS},{40:[1,146]},{21:[1,147]},{21:$Vj,23:148,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{40:[1,149]},{40:[1,150]},{19:[1,151],75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{19:[1,152],75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{22:$Vw},{40:[1,153]},{57:[1,154]},{19:[1,155]},{2:$V0,4:156,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg},{39:[1,157],65:$VS},{40:[1,158]},{39:[1,159],65:$VP},{19:[2,73]},o($VT,[2,85],{77:$VA,78:$VB,79:$VC,80:$VD}),o($VT,[2,86],{77:$VA,78:$VB,79:$VC,80:$VD}),o($VU,[2,87],{80:$VD}),o($VU,[2,88],{80:$VD}),o($VU,[2,89],{80:$VD}),o($VU,[2,90],{80:$VD}),o($VV,[2,92],{75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD}),o($VV,[2,93],{75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD}),o($VV,[2,94],{75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD}),o($VV,[2,95],{75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD}),o($VV,[2,96],{75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD}),o($VV,[2,97],{75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD}),o([19,39,41,51,65,87],[2,98],{75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VL,89:$VM}),o($VW,[2,99],{75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,89:$VM}),o($VW,[2,100],{75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,89:$VM}),o($VN,[2,106]),{39:[1,160]},{39:$VO},o($VQ,[2,76],{75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),o($VR,[2,17]),{40:[1,161]},{20:162,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9},{2:$V0,4:164,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,64:163,66:$Vg},o($VQ,[2,71]),{19:[1,165],75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{2:$V0,4:166,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg},{46:167,47:168,48:169,49:170,50:$VX,53:$VY},{21:$Vj,23:173,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{21:$Vj,23:174,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{2:$V0,4:76,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,45:$Vb,52:$Vx,54:$Vc,57:$Vd,58:175,59:$Ve,60:$Vf,66:$Vg},{38:[1,176]},{2:$V0,4:177,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,41:[2,59],45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,41:[2,61],45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg},{40:[1,178]},{2:$V0,4:180,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,62:179,66:$Vg},{19:[2,72]},o($VN,[2,84]),{2:$V0,4:164,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,64:181,66:$Vg},{21:[1,182]},{41:[1,183]},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,41:[2,68],45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,63:[1,184],66:$Vg},o($VR,[2,18]),{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,41:[1,185],45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg},{41:[1,186]},{41:[2,39],48:187,49:188,50:$VX,53:$VY},{41:[2,43],47:189,49:170,50:$VX},o($VZ,[2,45]),{51:[1,190]},{21:$Vj,23:191,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{39:[1,192],75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{39:[1,193],75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{41:[1,194]},{21:$Vj,23:195,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,41:[2,60],45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg},{2:$V0,4:180,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,62:196,66:$Vg},{41:[1,197]},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,41:[2,64],45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,63:[1,198],66:$Vg},{41:[1,199]},o($VQ,[2,70]),o($Vh,[2,67]),{21:$Vj,23:200,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},o($Vh,[2,32],{42:201,44:202,43:[1,203]}),o($Vh,[2,38]),{41:[2,40],47:204,49:170,50:$VX},o($VZ,[2,44]),{41:[2,42],49:188,50:$VX},{2:$V0,4:205,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg},{51:[1,206],75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{40:[1,207]},{40:[1,208]},o($Vh,[2,56]),{39:[1,209],75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},{41:[1,210]},o($Vh,[2,63]),{41:[2,65]},o($Vh,[2,66]),{41:[2,69],75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},o($Vh,[2,33],{44:212,43:[1,211]}),o($V_,[2,36]),{37:$V$},{41:[2,41],49:188,50:$VX},o($V01,[2,48],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,16:13,17:14,18:15,20:18,6:33,2:$V0,14:$V1,15:$V2,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,45:$Vb,52:[1,214],54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg}),{2:$V0,4:215,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg},{2:$V0,4:217,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,45:$Vb,54:$Vc,55:216,56:$V11,57:$Vd,59:$Ve,60:$Vf,66:$Vg},{2:$V0,4:217,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,45:$Vb,54:$Vc,55:219,56:$V11,57:$Vd,59:$Ve,60:$Vf,66:$Vg},{19:[1,220]},o($Vh,[2,62]),{37:$V$,40:[1,221]},o($V_,[2,35]),{38:[1,222]},{19:[1,223]},o($VZ,[2,46],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,16:13,17:14,18:15,20:18,6:33,2:$V0,14:$V1,15:$V2,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,45:$Vb,52:[1,224],54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg}),{41:[1,225]},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,41:[2,52],45:$Vb,54:$Vc,56:[1,226],57:$Vd,59:$Ve,60:$Vf,66:$Vg},{19:[1,227]},{41:[1,228]},o($Vh,[2,57]),{2:$V0,4:229,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg},{21:$Vj,23:230,30:53,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,38:$Vq,73:54,74:$Vr,76:$Vs,90:$Vt,91:$Vu,92:$Vv},o($V01,[2,49]),{19:[1,231]},o($Vh,[2,50]),{19:[1,232]},{2:$V0,4:233,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg},o($Vh,[2,51]),{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,41:[1,234],45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg},{39:[1,235],75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM},o($VZ,[2,47]),{2:$V0,4:236,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,41:[2,53],45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,41:[2,55],45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg},o($Vh,[2,34]),{40:[1,237]},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,41:[2,54],45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg},{2:$V0,4:238,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:$V2,16:13,17:14,18:15,20:18,21:$V3,24:$V4,25:$V5,26:$V6,27:$V7,28:$V8,29:$V9,37:$Va,41:[1,239],45:$Vb,54:$Vc,57:$Vd,59:$Ve,60:$Vf,66:$Vg},o($V_,[2,37])],
defaultActions: {27:[2,20],28:[2,21],29:[2,22],30:[2,23],31:[2,24],32:[2,1],63:[2,75],104:[2,74],123:[2,73],141:[2,28],159:[2,72],198:[2,65]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3: console.log("Reconocio : " + yy_.yytext);  return 91 
break;
case 4: console.log("Reconocio : " + yy_.yytext);  return 92 
break;
case 5: console.log("Reconocio : " + yy_.yytext);  return 81 
break;
case 6: console.log("Reconocio : " + yy_.yytext);  return 82 
break;
case 7: console.log("Reconocio : " + yy_.yytext);  return 38 
break;
case 8: console.log("Reconocio : " + yy_.yytext);  return 39 
break;
case 9: console.log("Reconocio : " + yy_.yytext);  return 'corchetea' 
break;
case 10: console.log("Reconocio : " + yy_.yytext);  return 'corchetec' 
break;
case 11: console.log("Reconocio : " + yy_.yytext);  return 40 
break;
case 12: console.log("Reconocio : " + yy_.yytext);  return 41 
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 65 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 19 
break;
case 15: console.log("Reconocio : " + yy_.yytext);  return 22 
break;
case 16: console.log("Reconocio : " + yy_.yytext);  return 'interrogacion' 
break;
case 17: console.log("Reconocio : " + yy_.yytext);  return 51 
break;
case 18: console.log("Reconocio : " + yy_.yytext);  return 75 
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 76 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 80 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 78 
break;
case 22: console.log("Reconocio : " + yy_.yytext);  return 77 
break;
case 23: console.log("Reconocio : " + yy_.yytext);  return 79 
break;
case 24: console.log("Reconocio : " + yy_.yytext);  return 84 
break;
case 25: console.log("Reconocio : " + yy_.yytext);  return 83 
break;
case 26: console.log("Reconocio : " + yy_.yytext);  return 86 
break;
case 27: console.log("Reconocio : " + yy_.yytext);  return 85 
break;
case 28: console.log("Reconocio : " + yy_.yytext);  return 87 
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 88 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 90 
break;
case 31: console.log("Reconocio : " + yy_.yytext);  return 89 
break;
case 32:console.log("Reconocio: "+yy_.yytext); return 25
break;
case 33:console.log("Reconocio: "+yy_.yytext); return 26
break;
case 34:console.log("Reconocio: "+yy_.yytext); return 27
break;
case 35:console.log("Reconocio: "+yy_.yytext); return 28
break;
case 36:console.log("Reconocio: "+yy_.yytext); return 29
break;
case 37:console.log("Reconocio: "+yy_.yytext); return 24
break;
case 38:console.log("Reconocio: "+yy_.yytext); return 35
break;
case 39:console.log("Reconocio: "+yy_.yytext); return 36
break;
case 40:console.log("Reconocio: "+yy_.yytext); return 37
break;
case 41:console.log("Reconocio: "+yy_.yytext); return 43
break;
case 42:console.log("Reconocio: "+yy_.yytext); return 45
break;
case 43:console.log("Reconocio: "+yy_.yytext); return 50
break;
case 44:console.log("Reconocio: "+yy_.yytext); return 53
break;
case 45:console.log("Reconocio: "+yy_.yytext); return 57
break;
case 46:console.log("Reconocio: "+yy_.yytext); return 59
break;
case 47:console.log("Reconocio: "+yy_.yytext); return 54
break;
case 48:console.log("Reconocio: "+yy_.yytext); return 52
break;
case 49:console.log("Reconocio: "+yy_.yytext); return 56
break;
case 50:console.log("Reconocio: "+yy_.yytext); return 63
break;
case 51:console.log("Reconocio: "+yy_.yytext); return 71
break;
case 52:console.log("Reconocio: "+yy_.yytext); return 69
break;
case 53:console.log("Reconocio: "+yy_.yytext); return 74
break;
case 54:console.log("Reconocio: "+yy_.yytext); return 60
break;
case 55:console.log("Reconocio: "+yy_.yytext); return 'length'
break;
case 56:console.log("Reconocio: "+yy_.yytext); return 66
break;
case 57:console.log("Reconocio: "+yy_.yytext); return 21
break;
case 58:console.log("Reconocio: "+yy_.yytext); return 31
break;
case 59:console.log("Reconocio: "+yy_.yytext); return 33
break;
case 60:console.log("Reconocio: "+yy_.yytext); return 34
break;
case 61:console.log("Reconocio: "+yy_.yytext); return 32
break;
case 62:return 5;
break;
case 63:
            console.log('Este error es un error lexico: '+yy_.yytext+' en al linea '+yy_.yylloc.first_line+' en la columna '+yy_.yylloc.first_column);
        
break;
}
},
rules: [/^(?:[ \r\t\n\s]+)/i,/^(?:\/\/.*)/i,/^(?:\/\*([\n]|[^"*/"])*\*\/)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:;)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:const\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:typeof\b)/i,/^(?:void\b)/i,/^(?:length\b)/i,/^(?:call\b)/i,/^(?:(([a-zA-ZñÑ]+)(([a-zA-ZñÑ]+)|([0-9]+)|_)*))/i,/^(?:("(([^\"\n])|(\\[\'\"\\nrt]))*"))/i,/^(?:(([0-9]+)(\.([0-9]+))?))/i,/^(?:{ENTERO})/i,/^(?:('(([^\'\n])|(\\[\'\"\\nrt]))'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}