/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,27],$V1=[1,12],$V2=[1,13],$V3=[1,14],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,30],$V8=[1,42],$V9=[1,43],$Va=[1,44],$Vb=[1,45],$Vc=[1,46],$Vd=[1,31],$Ve=[1,41],$Vf=[1,32],$Vg=[1,40],$Vh=[1,33],$Vi=[1,34],$Vj=[1,35],$Vk=[1,38],$Vl=[1,39],$Vm=[1,37],$Vn=[1,36],$Vo=[2,5,16,17,18,26,27,28,35,37,38,39,40,41,50,51,55,56,58,61,63,64,65,66,67,69,71,72],$Vp=[1,57],$Vq=[1,58],$Vr=[1,59],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[1,73],$Vz=[1,60],$VA=[1,74],$VB=[1,55],$VC=[1,56],$VD=[1,64],$VE=[1,65],$VF=[1,66],$VG=[34,36],$VH=[2,35],$VI=[1,80],$VJ=[1,89],$VK=[26,77],$VL=[1,107],$VM=[1,106],$VN=[1,108],$VO=[1,109],$VP=[1,110],$VQ=[1,111],$VR=[1,112],$VS=[1,113],$VT=[1,114],$VU=[1,115],$VV=[1,116],$VW=[1,117],$VX=[1,118],$VY=[1,119],$VZ=[1,120],$V_=[8,36,52,62,78,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],$V$=[8,62],$V01=[1,148],$V11=[2,5,16,17,18,26,27,28,35,37,38,39,40,41,50,51,53,55,56,58,61,63,64,65,66,67,69,71,72],$V21=[1,187],$V31=[36,52],$V41=[8,34,36,62],$V51=[8,36,52,62,78,82,83,88,89,90,91,92,93,94,95,96],$V61=[8,36,52,62,78,82,83,84,85,86,88,89,90,91,92,93,94,95,96],$V71=[8,36,52,62,78,88,89,90,91,92,93,94,95,96],$V81=[8,36,52,62,78,94,95],$V91=[8,36,52,62,78],$Va1=[1,218],$Vb1=[1,230],$Vc1=[1,231],$Vd1=[1,232],$Ve1=[1,247],$Vf1=[1,248],$Vg1=[1,249],$Vh1=[1,258],$Vi1=[1,274],$Vj1=[1,273],$Vk1=[1,289],$Vl1=[58,61,63],$Vm1=[1,322],$Vn1=[36,78],$Vo1=[58,61],$Vp1=[8,36,78];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"ASIGNACION":7,"puntoycoma":8,"DECLARACION":9,"IF":10,"IF_SINLLAVES":11,"SWITCH":12,"FOR":13,"WHILE":14,"DO_WHILE":15,"break":16,"continue":17,"return":18,"EXPRESION":19,"N_PRINT":20,"N_PRINTLN":21,"FUNCIONES":22,"METODOS":23,"LLAMADA":24,"BLOQUE_INST":25,"id":26,"inc":27,"dec":28,"VECTOR":29,"MODIVECTOR":30,"TERNARIO":31,"TIPOVAR":32,"CONJID":33,"igual":34,"const":35,"coma":36,"int":37,"double":38,"boolean":39,"char":40,"string":41,"TIPODATO":42,"cadena":43,"caracter":44,"decimal":45,"entero":46,"true":47,"false":48,"null":49,"if":50,"parentesisa":51,"parentesisc":52,"else":53,"IFS_INSTRUCCION":54,"switch":55,"llavea":56,"CASES_LIST":57,"llavec":58,"DEFAULT":59,"CASE":60,"case":61,"dospuntos":62,"default":63,"for":64,"while":65,"do":66,"void":67,"PARAMETROS":68,"call":69,"PARAMETROSLLAMADA":70,"println":71,"print":72,"N_TYPEOF":73,"typeof":74,"interrogacion":75,"INST_1LINE":76,"corchetea":77,"corchetec":78,"new":79,"CONJVECTOR":80,"CONJEXP":81,"menos":82,"mas":83,"div":84,"multi":85,"mod":86,"pow":87,"igualigual":88,"diferente":89,"menorque":90,"menorigual":91,"mayorque":92,"mayorigual":93,"or":94,"and":95,"xor":96,"not":97,"tolower":98,"toupper":99,"round":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"puntoycoma",16:"break",17:"continue",18:"return",26:"id",27:"inc",28:"dec",34:"igual",35:"const",36:"coma",37:"int",38:"double",39:"boolean",40:"char",41:"string",43:"cadena",44:"caracter",45:"decimal",46:"entero",47:"true",48:"false",49:"null",50:"if",51:"parentesisa",52:"parentesisc",53:"else",55:"switch",56:"llavea",58:"llavec",61:"case",62:"dospuntos",63:"default",64:"for",65:"while",66:"do",67:"void",69:"call",71:"println",72:"print",74:"typeof",75:"interrogacion",77:"corchetea",78:"corchetec",79:"new",82:"menos",83:"mas",84:"div",85:"multi",86:"mod",87:"pow",88:"igualigual",89:"diferente",90:"menorque",91:"menorigual",92:"mayorque",93:"mayorigual",94:"or",95:"and",96:"xor",97:"not",98:"tolower",99:"toupper",100:"round"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,3],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,3],[6,3],[6,3],[6,3],[6,2],[6,2],[6,2],[6,2],[9,4],[9,5],[9,2],[7,3],[33,3],[33,1],[32,1],[32,1],[32,1],[32,1],[32,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[10,5],[10,7],[10,7],[11,5],[11,7],[11,7],[54,2],[54,2],[54,2],[54,2],[54,3],[54,3],[54,3],[54,3],[12,7],[12,8],[12,7],[12,8],[12,9],[57,2],[57,1],[60,4],[60,3],[59,3],[59,2],[13,9],[13,9],[14,5],[15,7],[23,6],[23,5],[22,6],[22,5],[68,4],[68,2],[24,5],[24,4],[24,4],[24,3],[70,3],[70,1],[21,4],[21,3],[20,4],[20,3],[73,4],[25,3],[25,2],[31,7],[76,1],[76,1],[76,1],[76,1],[76,1],[76,2],[76,2],[76,2],[76,2],[29,10],[29,15],[29,6],[29,8],[80,3],[80,5],[80,3],[81,3],[81,1],[30,6],[30,9],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,2],[19,2],[19,2],[19,2],[19,3],[19,1],[19,1],[19,3],[19,1],[19,7],[19,4],[19,4],[19,4],[19,4],[19,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("termine de analizar" ); return this.$; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];   
break;
case 3: case 115:
this.$= [$$[$0]];
break;
case 4: case 5: case 16: case 17: case 20:
this.$= $$[$0-1];
break;
case 6: case 7: case 8: case 18: case 19:
this.$= $$[$0];
break;
case 9: case 10: case 11: case 72: case 140: case 141: case 143:
this.$=$$[$0];
break;
case 12:
this.$= new Break(_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 13:
this.$= new Continue(_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 14:
this.$= new Return(null,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 15:
this.$= new Return($$[$0-1],_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 21:
this.$=new BloqueInstSup($$[$0],_$[$0].first_line,_$[$0].last_column);
break;
case 22: case 59:
this.$=new IncDecremento ($$[$0-2],TypeAritmeticas.INCDER,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 23: case 60:
this.$=new IncDecremento ($$[$0-2],TypeAritmeticas.DECDER,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 24: case 61:
this.$=new IncDecremento ($$[$0-1],TypeAritmeticas.INCIZQ,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 25: case 62:
this.$=new IncDecremento ($$[$0-1],TypeAritmeticas.DECIZQ,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 26: case 27: case 28: case 95: case 111: case 139:
this.$=$$[$0-1];
break;
case 29:
console.log("Error Sintactico, simbolo no esperado:"  + yytext 
                           + " linea: " + this._$.first_line
                           +" columna: "+ this._$.first_column);
                    bDatos.addError("Sintactico","No se esperaba este caracter "+yytext,_$[$0-1].first_line,_$[$0-1].last_column);    
                    this.$=new Nothing(_$[$0-1].first_line,_$[$0-1].last_column);
                    
break;
case 30:
this.$= new Declaracion(false,$$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 31:
this.$= new Declaracion(true,$$[$0-3],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 32:
this.$= new Declaracion(false,$$[$0-1],$$[$0],null,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 33:
this.$=new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].last_column)
break;
case 34:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 35:
  this.$=[$$[$0]];   
break;
case 36:
this.$=Type.INT;
break;
case 37:
this.$=Type.DOUBLE;
break;
case 38:
this.$=Type.BOOLEAN;
break;
case 39:
this.$=Type.CHAR;
break;
case 40:
this.$=Type.STRING;
break;
case 41:
this.$= new Literal($$[$0],Type.STRING,_$[$0].first_line,_$[$0].last_column);
break;
case 42:
this.$= new Literal($$[$0],Type.CHAR,_$[$0].first_line,_$[$0].last_column);
break;
case 43:
this.$= new Literal($$[$0],Type.DOUBLE,_$[$0].first_line,_$[$0].last_column);
break;
case 44:
this.$= new Literal($$[$0],Type.ID,_$[$0].first_line,_$[$0].last_column);
break;
case 45:
this.$= new Literal($$[$0],Type.INT,_$[$0].first_line,_$[$0].last_column);
break;
case 46: case 47:
this.$= new Literal($$[$0],Type.BOOLEAN,_$[$0].first_line,_$[$0].last_column);
break;
case 48:
this.$= new Literal($$[$0],Type.NULL,_$[$0].first_line,_$[$0].last_column);
break;
case 49:
this.$=new If($$[$0-2],$$[$0],[],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 50:
this.$= new If($$[$0-4],$$[$0-2],$$[$0],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 51:
this.$= new If($$[$0-4],$$[$0-2],[$$[$0]],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 52:
this.$=new If($$[$0-2],[$$[$0]],[],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 53:
this.$= new If($$[$0-4],[$$[$0-2]],$$[$0],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 54:
this.$= new If($$[$0-4],[$$[$0-2]],[$$[$0]],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 55: case 56: case 57: case 58:
this.$=$$[$0-1]
break;
case 63:
this.$=new Switch($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 64:
$$[$0-2].push($$[$0-1]);   this.$=new Switch($$[$0-5],$$[$0-2],_$[$0-7].first_line,_$[$0-7].last_column);
break;
case 65:
this.$= new Switch($$[$0-4],[$$[$0-1]],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 66:
$$[$0-1].push($$[$0-2]);     this.$= new Switch($$[$0-5],$$[$0-1],_$[$0-7].first_line,_$[$0-7].last_column);
break;
case 67:
$$[$0-3].push($$[$0-2]);  $$[$0-3].concat($$[$0-1]);   this.$= new Switch($$[$0-6],$$[$0-3],_$[$0-8].first_line,_$[$0-8].last_column);
break;
case 68:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 69: case 89:
this.$=[$$[$0]];
break;
case 70:
this.$= new Case($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 71:
this.$= new Case($$[$0-1],[],_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 73: case 96:
this.$=[new Nothing(_$[$0-1].first_line,_$[$0-1].last_column)];
break;
case 74: case 75:
this.$=new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].last_column);
break;
case 76:
this.$=new While($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 77:
this.$=new Dowhile($$[$0-2],$$[$0-5],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 78:
this.$= new Metodo($$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].last_column);
break;
case 79:
this.$= new Metodo($$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 80:
this.$= new Funcion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].last_column);
break;
case 81:
this.$= new Funcion($$[$0-4],$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].last_column);
break;
case 82:
$$[$0-3].push(new Declaracion(false,$$[$0-1],[$$[$0]],null,_$[$0-3].first_line,_$[$0-3].last_column)); this.$=$$[$0-3];
break;
case 83:
this.$=[new Declaracion(false,$$[$0-1],[$$[$0]],null,_$[$0-1].first_line,_$[$0-1].last_column)]
break;
case 84:
this.$=new Call($$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].last_column)
break;
case 85:
this.$=new Call($$[$0-2],[],_$[$0-3].first_line,_$[$0-3].last_column)
break;
case 86:
this.$=new Call($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column)
break;
case 87:
this.$=new Call($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].last_column)
break;
case 88:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 90:
this.$=new Println($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 91:
this.$=new Println(null,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 92:
this.$=new Print($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 93:
this.$=new Print(null,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 94:
this.$=new Typeof($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column);
break;
case 97: case 144:
this.$=new Ternario($$[$0-5],$$[$0-2],$$[$0],_$[$0-6].first_line,_$[$0-6].last_column);
break;
case 98: case 99: case 100: case 101: case 102:
this.$=$$[$0]
break;
case 103: case 135:
this.$=new IncDecremento ($$[$0-1],TypeAritmeticas.INCDER,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 104: case 137:
this.$=new IncDecremento ($$[$0-1],TypeAritmeticas.DECDER,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 105: case 136:
this.$=new IncDecremento ($$[$0],TypeAritmeticas.INCIZQ,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 106: case 138:
this.$=new IncDecremento ($$[$0],TypeAritmeticas.DECIZQ,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 107:
this.$= new DeclaracionVector($$[$0-9],$$[$0-8],1,$$[$0-3],null,$$[$0-1],null,null,_$[$0-9].first_line,_$[$0-9].last_column);
break;
case 108:
this.$= new DeclaracionVector($$[$0-14],$$[$0-13],1,$$[$0-8],$$[$0-6],$$[$0-3],null,null,_$[$0-14].first_line,_$[$0-14].last_column);
break;
case 109:
this.$= new DeclaracionVector($$[$0-5],$$[$0-4],2,null,null,null,$$[$0],1,_$[$0-5].first_line,_$[$0-5].last_column);
break;
case 110:
this.$= new DeclaracionVector($$[$0-7],$$[$0-6],2,null,null,null,$$[$0],2,_$[$0-7].first_line,_$[$0-7].last_column);
break;
case 112:
$$[$0-4].push($$[$0-1]);  this.$= $$[$0-4];
break;
case 113:
this.$= [$$[$0-1]];
break;
case 114:
$$[$0-2].push($$[$0]);  this.$=$$[$0-2];
break;
case 116:
this.$= new ModiVector($$[$0-5],$$[$0-3],null,$$[$0],_$[$0-5].first_line,_$[$0-5].last_column);
break;
case 117:
this.$= new ModiVector($$[$0-8],$$[$0-6],$$[$0-3],$$[$0],_$[$0-8].first_line,_$[$0-8].last_column);
break;
case 118:
this.$=new OAritmeticas($$[$0],null,TypeAritmeticas.NEGACION,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 119:
this.$=new OAritmeticas($$[$0-2],$$[$0],TypeAritmeticas.SUMA,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 120:
this.$=new OAritmeticas($$[$0-2],$$[$0],TypeAritmeticas.RESTA,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 121:
this.$=new OAritmeticas($$[$0-2],$$[$0],TypeAritmeticas.DIVISION,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 122:
this.$=new OAritmeticas($$[$0-2],$$[$0],TypeAritmeticas.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 123:
this.$=new OAritmeticas($$[$0-2],$$[$0],TypeAritmeticas.MOD,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 124:
this.$=new OAritmeticas($$[$0-2],$$[$0],TypeAritmeticas.POW,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 125:
this.$=new ORelacionales($$[$0-2],$$[$0],TypeRelacionales.IGUALQUE,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 126:
this.$=new ORelacionales($$[$0-2],$$[$0],TypeRelacionales.DIFERENTEQUE,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 127:
this.$=new ORelacionales($$[$0-2],$$[$0],TypeRelacionales.MENORQUE,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 128:
this.$=new ORelacionales($$[$0-2],$$[$0],TypeRelacionales.MENORIGUALQUE,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 129:
this.$=new ORelacionales($$[$0-2],$$[$0],TypeRelacionales.MAYORQUE,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 130:
this.$=new ORelacionales($$[$0-2],$$[$0],TypeRelacionales.MAYORIGUALQUE,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 131:
this.$=new OLogicas($$[$0-2],$$[$0],TypeLogic.OR,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 132:
this.$=new OLogicas($$[$0-2],$$[$0],TypeLogic.AND,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 133:
this.$=new OLogicas($$[$0-2],$$[$0],TypeLogic.XOR,_$[$0-2].first_line,_$[$0-2].last_column);
break;
case 134:
this.$=new  OLogicas($$[$0],null,TypeLogic.NOT,_$[$0-1].first_line,_$[$0-1].last_column);
break;
case 142:
this.$=new Asignacion([$$[$0-2]],$$[$0],_$[$0-2].first_line,_$[$0-2].last_column)
break;
case 145:
this.$=new ToLower($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column)
break;
case 146:
this.$=new ToUpper($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column)
break;
case 147:
this.$=new Round($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column)
break;
case 148:
this.$=new AccesoVector($$[$0-3],$$[$0-1],null,_$[$0-3].first_line,_$[$0-3].last_column)
break;
case 149:
this.$=new AccesoVector($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].last_column)
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:$V3,20:15,21:16,22:17,23:18,24:19,25:20,26:$V4,27:$V5,28:$V6,29:24,30:25,31:26,32:29,33:28,35:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,50:$Vd,51:$Ve,55:$Vf,56:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,69:$Vl,71:$Vm,72:$Vn},{1:[3]},{2:$V0,5:[1,47],6:48,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:$V3,20:15,21:16,22:17,23:18,24:19,25:20,26:$V4,27:$V5,28:$V6,29:24,30:25,31:26,32:29,33:28,35:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,50:$Vd,51:$Ve,55:$Vf,56:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,69:$Vl,71:$Vm,72:$Vn},o($Vo,[2,3]),{8:[1,49]},{8:[1,50]},o($Vo,[2,6]),o($Vo,[2,7]),o($Vo,[2,8]),o($Vo,[2,9]),o($Vo,[2,10]),o($Vo,[2,11]),{8:[1,51]},{8:[1,52]},{8:[1,53],19:54,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{8:[1,75]},{8:[1,76]},o($Vo,[2,18]),o($Vo,[2,19]),{8:[1,77]},o($Vo,[2,21]),o($VG,$VH,{27:[1,78],28:[1,79],51:$VI,77:[1,81]}),{26:[1,82]},{26:[1,83]},{8:[1,84]},{8:[1,85]},{8:[1,86]},{8:[1,87]},{34:[1,88],36:$VJ},{26:[1,91],33:90},{32:92,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc},{51:[1,93]},{51:[1,94]},{51:[1,95]},{51:[1,96]},{25:97,56:$Vg},{51:[1,98]},{51:[1,99]},{26:[1,100]},{26:[1,101]},{2:$V0,4:102,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:$V3,20:15,21:16,22:17,23:18,24:19,25:20,26:$V4,27:$V5,28:$V6,29:24,30:25,31:26,32:29,33:28,35:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,50:$Vd,51:$Ve,55:$Vf,56:$Vg,58:[1,103],64:$Vh,65:$Vi,66:$Vj,67:$Vk,69:$Vl,71:$Vm,72:$Vn},{19:104,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},o($VK,[2,36]),o($VK,[2,37]),o($VK,[2,38]),o($VK,[2,39]),o($VK,[2,40]),{1:[2,1]},o($Vo,[2,2]),o($Vo,[2,4]),o($Vo,[2,5]),o($Vo,[2,12]),o($Vo,[2,13]),o($Vo,[2,14]),{8:[1,105],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{19:121,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:122,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},o($V_,[2,44],{27:[1,123],28:[1,124],34:[1,125],51:$VI,77:[1,126]}),{26:[1,127]},{26:[1,128]},{19:129,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},o($V_,[2,140]),o($V_,[2,141]),o($V_,[2,143]),{51:[1,130]},{51:[1,131]},{51:[1,132]},o($V_,[2,41]),o($V_,[2,42]),o($V_,[2,43]),o($V_,[2,45]),o($V_,[2,46]),o($V_,[2,47]),o($V_,[2,48]),{51:[1,133]},o($Vo,[2,16]),o($Vo,[2,17]),o($Vo,[2,20]),{8:[1,134]},{8:[1,135]},{19:138,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:[1,137],69:$Vl,70:136,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:139,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{8:[1,140]},{8:[1,141]},o($Vo,[2,26]),o($Vo,[2,27]),o($Vo,[2,28]),o($Vo,[2,29]),{19:142,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{26:[1,143]},o($V$,[2,32],{34:[1,144],36:$VJ}),o([8,34,36],$VH,{51:[1,145],77:[1,146]}),{26:$V01,33:147},{19:149,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:150,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{7:152,9:151,26:$V01,32:153,33:28,35:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc},{19:154,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{65:[1,155]},{19:156,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:[1,157],69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:158,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:[1,159],69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{51:[1,160]},{51:[1,161]},{2:$V0,6:48,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:$V1,17:$V2,18:$V3,20:15,21:16,22:17,23:18,24:19,25:20,26:$V4,27:$V5,28:$V6,29:24,30:25,31:26,32:29,33:28,35:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,50:$Vd,51:$Ve,55:$Vf,56:$Vg,58:[1,162],64:$Vh,65:$Vi,66:$Vj,67:$Vk,69:$Vl,71:$Vm,72:$Vn},o($V11,[2,96]),{52:[1,163],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},o($Vo,[2,15]),{19:164,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:165,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:166,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:167,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:168,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:169,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:170,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:171,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:172,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:173,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:174,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:175,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:176,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:177,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:178,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},o($V_,[2,118]),o($V_,[2,134]),o($V_,[2,135]),o($V_,[2,137]),{19:179,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:180,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},o($V_,[2,136]),o($V_,[2,138]),{52:[1,181],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{19:182,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:183,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:184,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:185,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},o($Vo,[2,22]),o($Vo,[2,23]),{36:$V21,52:[1,186]},o($V_,[2,87]),o($V31,[2,89],{82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ}),{78:[1,188],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},o($Vo,[2,24]),o($Vo,[2,25]),o($V$,[2,33],{82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ}),o($V41,[2,34]),{19:189,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{32:192,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,52:[1,191],68:190},{78:[1,193]},{34:[1,194],36:$VJ},o($V41,$VH),{52:[1,195],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{52:[1,196],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{8:[1,197]},{8:[1,198]},{26:$V01,33:90},{52:[1,199],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{51:[1,200]},{52:[1,201],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},o($V$,[2,93]),{52:[1,202],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},o($V$,[2,91]),{32:192,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,52:[1,204],68:203},{19:138,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,52:[1,206],69:$Vl,70:205,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},o($V11,[2,95]),{75:[1,207]},o($V51,[2,119],{84:$VN,85:$VO,86:$VP,87:$VQ}),o($V51,[2,120],{84:$VN,85:$VO,86:$VP,87:$VQ}),o($V61,[2,121],{87:$VQ}),o($V61,[2,122],{87:$VQ}),o($V61,[2,123],{87:$VQ}),o($V61,[2,124],{87:$VQ}),o($V71,[2,125],{82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ}),o($V71,[2,126],{82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ}),o($V71,[2,127],{82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ}),o($V71,[2,128],{82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ}),o($V71,[2,129],{82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ}),o($V71,[2,130],{82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ}),o([8,36,52,62,78,94],[2,131],{82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,95:$VY,96:$VZ}),o($V81,[2,132],{82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,96:$VZ}),o($V81,[2,133],{82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,96:$VZ}),o($V91,[2,142],{82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ}),{78:[1,208],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},o($V_,[2,139],{75:[1,209]}),{52:[1,210],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{52:[1,211],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{52:[1,212],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{52:[1,213],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},o($V_,[2,86]),{19:214,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{34:[1,215],77:[1,216]},o($V$,[2,30],{82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ}),{36:$Va1,52:[1,217]},{25:219,56:$Vg},{26:[1,220]},{34:[1,221],77:[1,222]},{19:223,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{7:226,9:227,20:228,21:229,25:224,26:$Vb1,27:$Vc1,28:$Vd1,32:153,33:28,35:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,54:225,56:$Vg,71:$Vm,72:$Vn},{56:[1,233]},{19:234,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:235,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{25:236,56:$Vg},{19:237,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},o($V$,[2,92]),o($V$,[2,90]),{36:$Va1,52:[1,238]},{25:239,56:$Vg},{36:$V21,52:[1,240]},o($V_,[2,85]),{7:242,9:243,20:244,21:245,24:246,26:$Ve1,27:$Vf1,28:$Vg1,32:153,33:28,35:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,69:$Vl,71:$Vm,72:$Vn,76:241},o($V_,[2,148],{77:[1,250]}),{19:251,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},o($V_,[2,145]),o($V_,[2,146]),o($V_,[2,147]),o($V_,[2,94]),o($V31,[2,88],{82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ}),{19:252,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:253,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{25:254,56:$Vg},{32:255,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc},o($Vo,[2,81]),o($V31,[2,83]),{77:$Vh1,79:[1,256],80:257},{78:[1,259]},o($V$,[2,31],{82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ}),o($Vo,[2,49],{53:[1,260]}),o($Vo,[2,52],{53:[1,261]}),{8:[1,262]},{8:[1,263]},{8:[1,264]},{8:[1,265]},o($VG,$VH,{27:[1,266],28:[1,267]}),{26:[1,268]},{26:[1,269]},{57:270,59:271,60:272,61:$Vi1,63:$Vj1},{8:[1,275],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{8:[1,276],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},o($Vo,[2,76]),{52:[1,277],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{25:278,56:$Vg},o($Vo,[2,79]),o($V_,[2,84]),{62:[1,279]},o($V$,[2,98]),o($V$,[2,99]),o($V$,[2,100]),o($V$,[2,101]),o($V$,[2,102]),o($VG,$VH,{27:[1,280],28:[1,281],51:$VI}),{26:[1,282]},{26:[1,283]},{19:284,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{62:[1,285],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{8:[2,116],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{78:[1,286],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},o($Vo,[2,80]),{26:[1,287]},{32:288,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc},{8:[2,109],36:$Vk1},{19:292,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,77:$Vh1,80:290,81:291,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{34:[1,293]},{10:295,25:294,50:[1,296],56:$Vg},{7:226,9:227,11:298,20:228,21:229,26:$Vb1,27:$Vc1,28:$Vd1,32:153,33:28,35:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,50:[1,299],54:297,71:$Vm,72:$Vn},o($V11,[2,55]),o($V11,[2,56]),o($V11,[2,57]),o($V11,[2,58]),{8:[1,300]},{8:[1,301]},{8:[1,302]},{8:[1,303]},{58:[1,304],59:305,60:306,61:$Vi1,63:$Vj1},{57:308,58:[1,307],60:272,61:$Vi1},o($Vl1,[2,69]),{62:[1,309]},{19:310,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:311,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:312,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{8:[1,313]},o($Vo,[2,78]),{7:242,9:243,20:244,21:245,24:246,26:$Ve1,27:$Vf1,28:$Vg1,32:153,33:28,35:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,69:$Vl,71:$Vm,72:$Vn,76:314},o($V$,[2,103]),o($V$,[2,104]),o($V$,[2,105]),o($V$,[2,106]),{78:[1,315],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{19:316,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{34:[1,317]},o($V31,[2,82]),{77:[1,318]},{77:[1,319]},{36:$Vk1,78:[1,320]},{36:$Vm1,78:[1,321]},o($Vn1,[2,115],{82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ}),{77:$Vh1,79:[1,323],80:324},o($Vo,[2,50]),o($Vo,[2,51]),{51:[1,325]},o($Vo,[2,53]),o($Vo,[2,54]),{51:[1,326]},o($V11,[2,59]),o($V11,[2,60]),o($V11,[2,61]),o($V11,[2,62]),o($Vo,[2,63]),{57:328,58:[1,327],60:272,61:$Vi1},o($Vl1,[2,68]),o($Vo,[2,65]),{58:[1,329],60:306,61:$Vi1},o($Vo1,[2,73],{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,20:15,21:16,22:17,23:18,24:19,25:20,29:24,30:25,31:26,33:28,32:29,4:330,2:$V0,16:$V1,17:$V2,18:$V3,26:$V4,27:$V5,28:$V6,35:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,50:$Vd,51:$Ve,55:$Vf,56:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,69:$Vl,71:$Vm,72:$Vn}),{62:[1,331],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{52:[1,332],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{52:[1,333],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},o($Vo,[2,77]),{8:[2,97]},o($V_,[2,149]),o($V91,[2,144],{82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ}),{19:334,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:335,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:292,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,81:336,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},o($Vp1,[2,111]),o($Vp1,[2,113]),{19:337,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{32:338,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc},{8:[2,110],36:$Vk1},{19:339,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{19:340,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},o($Vo,[2,64]),{58:[1,341],60:306,61:$Vi1},o($Vo,[2,66]),o($Vo1,[2,72],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,20:15,21:16,22:17,23:18,24:19,25:20,29:24,30:25,31:26,33:28,32:29,6:48,2:$V0,16:$V1,17:$V2,18:$V3,26:$V4,27:$V5,28:$V6,35:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,50:$Vd,51:$Ve,55:$Vf,56:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,69:$Vl,71:$Vm,72:$Vn}),o($Vl1,[2,71],{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,20:15,21:16,22:17,23:18,24:19,25:20,29:24,30:25,31:26,33:28,32:29,4:342,2:$V0,16:$V1,17:$V2,18:$V3,26:$V4,27:$V5,28:$V6,35:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,50:$Vd,51:$Ve,55:$Vf,56:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,69:$Vl,71:$Vm,72:$Vn}),{25:343,56:$Vg},{25:344,56:$Vg},{8:[2,117],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{78:[1,345],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{36:$Vm1,78:[1,346]},o($Vn1,[2,114],{82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ}),{77:[1,347]},{52:[1,348],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{52:[1,349],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},o($Vo,[2,67]),o($Vl1,[2,70],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,20:15,21:16,22:17,23:18,24:19,25:20,29:24,30:25,31:26,33:28,32:29,6:48,2:$V0,16:$V1,17:$V2,18:$V3,26:$V4,27:$V5,28:$V6,35:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,50:$Vd,51:$Ve,55:$Vf,56:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk,69:$Vl,71:$Vm,72:$Vn}),o($Vo,[2,74]),o($Vo,[2,75]),{8:[2,107]},o($Vp1,[2,112]),{19:350,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{25:224,56:$Vg},{7:226,9:227,20:228,21:229,26:$Vb1,27:$Vc1,28:$Vd1,32:153,33:28,35:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,54:225,71:$Vm,72:$Vn},{78:[1,351],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{77:[1,352]},{19:353,24:63,26:$Vp,27:$Vq,28:$Vr,42:61,43:$Vs,44:$Vt,45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,51:$Vz,69:$Vl,73:62,74:$VA,82:$VB,97:$VC,98:$VD,99:$VE,100:$VF},{78:[1,354],82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ},{8:[2,108]}],
defaultActions: {47:[2,1],314:[2,97],345:[2,107],354:[2,108]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {B_datos}=require('../BaseDatos/B_datos.ts');
    let bDatos=B_datos.getInstance(); 
	const {Type} =require('../Symbols/Type');
    const {TypeAritmeticas}= require('../Expresion/TypeAritmeticas.ts');
    const {TypeRelacionales}= require('../Expresion/TypeRelacionales.ts');
    const {TypeLogic}= require('../Expresion/TypeLogic.ts');
    const {Literal}= require('../Expresion/Literal.ts');
    const {Declaracion}= require('../Instruccion/Declaracion.ts');
    const {Asignacion} = require('../Instruccion/Asignacion.ts')
    const {OAritmeticas}= require('../Expresion/OAritmeticas.ts');
    const {IncDecremento}=require('../Expresion/IncDecremento.ts');
    const {ORelacionales}= require('../Expresion/ORelacionales.ts');
    const {OLogicas}= require('../Expresion/OLogicas.ts');
    const {If} = require('../Instruccion/If.ts');
    const {While} = require('../Instruccion/While.ts');
    const {Dowhile} = require('../Instruccion/Dowhile.ts');
    const {For}= require('../Instruccion/For.ts');
    const {Switch}= require('../Instruccion/Switch.ts');
    const {Case} = require('../Instruccion/Case.ts');

    //SALTOS DE SENTENCIAS
    const {Break}= require('../Instruccion/Break.ts');
    const {Continue}= require('../Instruccion/Continue.ts');
    const {Return}= require('../Instruccion/Return.ts');

    //NATIVAS
    const {Print}= require('../Instruccion/FuncionesNativas/Print.ts');
    const {Println}= require('../Instruccion/FuncionesNativas/Println.ts');
    const {Typeof}=require('../Instruccion/FuncionesNativas/Typeof.ts')

    //METODOS Y FUNCIONES
    const {Metodo}= require('../Instruccion/Metodo.ts');
    const {Funcion}= require('../Instruccion/Funcion.ts');
    const {Call}= require('../Instruccion/Call.ts');

    //EXTRAS
    const {Nothing}= require('../Instruccion/Nothing.ts');
    const {BloqueInstSup}= require('../Instruccion/BloqueInstSup.ts');

    //FASE 2
    const {Ternario}= require('../Instruccion/Ternario.ts');
    const {ToLower}= require('../Expresion/ToLower.ts');
    const {ToUpper}= require('../Expresion/ToUpper.ts');
    const {Round}= require('../Expresion/Round.ts');
    const {DeclaracionVector} = require('../Instruccion/DeclaracionVector.ts');
    const {AccesoVector} = require('../Expresion/AccesoVector.ts');
    const {ModiVector} = require('../Instruccion/ModiVector.ts');


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3: console.log("Reconocio : " + yy_.yytext);  return 27 
break;
case 4: console.log("Reconocio : " + yy_.yytext);  return 28 
break;
case 5: console.log("Reconocio : " + yy_.yytext);  return 88 
break;
case 6: console.log("Reconocio : " + yy_.yytext);  return 89 
break;
case 7: console.log("Reconocio : " + yy_.yytext);  return 51 
break;
case 8: console.log("Reconocio : " + yy_.yytext);  return 52 
break;
case 9: console.log("Reconocio : " + yy_.yytext);  return 77 
break;
case 10: console.log("Reconocio : " + yy_.yytext);  return 78 
break;
case 11: console.log("Reconocio : " + yy_.yytext);  return 56 
break;
case 12: console.log("Reconocio : " + yy_.yytext);  return 58 
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 36 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 8 
break;
case 15: console.log("Reconocio : " + yy_.yytext);  return 34 
break;
case 16: console.log("Reconocio : " + yy_.yytext);  return 75 
break;
case 17: console.log("Reconocio : " + yy_.yytext);  return 62 
break;
case 18: console.log("Reconocio : " + yy_.yytext);  return 83 
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 82 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 87 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 85 
break;
case 22: console.log("Reconocio : " + yy_.yytext);  return 84 
break;
case 23: console.log("Reconocio : " + yy_.yytext);  return 86 
break;
case 24: console.log("Reconocio : " + yy_.yytext);  return 91 
break;
case 25: console.log("Reconocio : " + yy_.yytext);  return 90 
break;
case 26: console.log("Reconocio : " + yy_.yytext);  return 93 
break;
case 27: console.log("Reconocio : " + yy_.yytext);  return 92 
break;
case 28: console.log("Reconocio : " + yy_.yytext);  return 94 
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 95 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 97 
break;
case 31: console.log("Reconocio : " + yy_.yytext);  return 96 
break;
case 32:console.log("Reconocio: "+yy_.yytext); return 37
break;
case 33:console.log("Reconocio: "+yy_.yytext); return 38
break;
case 34:console.log("Reconocio: "+yy_.yytext); return 39
break;
case 35:console.log("Reconocio: "+yy_.yytext); return 40
break;
case 36:console.log("Reconocio: "+yy_.yytext); return 41
break;
case 37:console.log("Reconocio: "+yy_.yytext); return 49
break;
case 38:console.log("Reconocio: "+yy_.yytext); return 35
break;
case 39:console.log("Reconocio: "+yy_.yytext); return 47
break;
case 40:console.log("Reconocio: "+yy_.yytext); return 48
break;
case 41:console.log("Reconocio: "+yy_.yytext); return 50
break;
case 42:console.log("Reconocio: "+yy_.yytext); return 53
break;
case 43:console.log("Reconocio: "+yy_.yytext); return 55
break;
case 44:console.log("Reconocio: "+yy_.yytext); return 61
break;
case 45:console.log("Reconocio: "+yy_.yytext); return 63
break;
case 46:console.log("Reconocio: "+yy_.yytext); return 65
break;
case 47:console.log("Reconocio: "+yy_.yytext); return 66
break;
case 48:console.log("Reconocio: "+yy_.yytext); return 64
break;
case 49:console.log("Reconocio: "+yy_.yytext); return 16
break;
case 50:console.log("Reconocio: "+yy_.yytext); return 17
break;
case 51:console.log("Reconocio: "+yy_.yytext); return 18
break;
case 52:console.log("Reconocio: "+yy_.yytext); return 71
break;
case 53:console.log("Reconocio: "+yy_.yytext); return 72
break;
case 54:console.log("Reconocio: "+yy_.yytext); return 74
break;
case 55:console.log("Reconocio: "+yy_.yytext); return 67
break;
case 56:console.log("Reconocio: "+yy_.yytext); return 'length'
break;
case 57:console.log("Reconocio: "+yy_.yytext); return 69
break;
case 58:console.log("Reconocio: "+yy_.yytext); return 98
break;
case 59:console.log("Reconocio: "+yy_.yytext); return 99
break;
case 60:console.log("Reconocio: "+yy_.yytext); return 100
break;
case 61:console.log("Reconocio: "+yy_.yytext); return 79
break;
case 62:console.log("Reconocio: "+yy_.yytext); return 26
break;
case 63:console.log("Reconocio: "+yy_.yytext); return 43
break;
case 64:console.log("Reconocio: "+yy_.yytext); return 45
break;
case 65:console.log("Reconocio ENTERO: "+yy_.yytext); return 46
break;
case 66:console.log("Reconocio: "+yy_.yytext); return 44
break;
case 67:return 5;
break;
case 68:
            bDatos.addError("Lexico","Caracter no reconocido "+yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column);
            console.log('Este error es un error lexico: '+yy_.yytext+' en al linea '+yy_.yylloc.first_line+' en la columna '+yy_.yylloc.first_column);
        
break;
}
},
rules: [/^(?:[ \r\t\n\s]+)/i,/^(?:\/\/.*)/i,/^(?:[/][*]([\n]|[^"*/"]|\*|\/)*[*][/])/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:;)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:null\b)/i,/^(?:const\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:typeof\b)/i,/^(?:void\b)/i,/^(?:length\b)/i,/^(?:call\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:new\b)/i,/^(?:(([a-zA-ZñÑ]+)(([a-zA-ZñÑ]+)|([0-9]+)|_)*))/i,/^(?:("((\\([\'\"\\nrt]))|([^\"\n]))*"))/i,/^(?:(([0-9]+)(\.([0-9]+))))/i,/^(?:([0-9]+))/i,/^(?:('(([^\'\n])|(\\([\'\"\\nrt])))'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}